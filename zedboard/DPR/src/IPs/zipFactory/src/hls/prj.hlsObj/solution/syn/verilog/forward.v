// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module forward (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src_V_dout,
        src_V_empty_n,
        src_V_read,
        size
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] src_V_dout;
input   src_V_empty_n;
output   src_V_read;
input  [15:0] size;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_V_read;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    src_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_43_p2;
wire   [15:0] it_1_fu_48_p2;
reg    ap_block_state2;
reg   [15:0] it_reg_32;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((tmp_fu_43_p2 == 1'd0) & (src_V_empty_n == 1'b0)) & (tmp_fu_43_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        it_reg_32 <= it_1_fu_48_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        it_reg_32 <= 16'd0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | (~((tmp_fu_43_p2 == 1'd0) & (src_V_empty_n == 1'b0)) & (tmp_fu_43_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((tmp_fu_43_p2 == 1'd0) & (src_V_empty_n == 1'b0)) & (tmp_fu_43_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_43_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        src_V_blk_n = src_V_empty_n;
    end else begin
        src_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((tmp_fu_43_p2 == 1'd0) & (src_V_empty_n == 1'b0)) & (tmp_fu_43_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        src_V_read = 1'b1;
    end else begin
        src_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((tmp_fu_43_p2 == 1'd0) & (src_V_empty_n == 1'b0)) & (tmp_fu_43_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((tmp_fu_43_p2 == 1'd0) & (src_V_empty_n == 1'b0)) & (tmp_fu_43_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state2 = ((tmp_fu_43_p2 == 1'd0) & (src_V_empty_n == 1'b0));
end

assign it_1_fu_48_p2 = (it_reg_32 + 16'd1);

assign tmp_fu_43_p2 = ((it_reg_32 == size) ? 1'b1 : 1'b0);

endmodule //forward
