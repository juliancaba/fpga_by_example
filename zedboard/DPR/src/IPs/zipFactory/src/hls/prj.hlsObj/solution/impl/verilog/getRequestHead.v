// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module getRequestHead (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src_V_dout,
        src_V_empty_n,
        src_V_read,
        header_objectID,
        header_objectID_ap_vld,
        header_methodID,
        header_methodID_ap_vld,
        header_cb,
        header_cb_ap_vld,
        header_size,
        header_size_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] src_V_dout;
input   src_V_empty_n;
output   src_V_read;
output  [7:0] header_objectID;
output   header_objectID_ap_vld;
output  [7:0] header_methodID;
output   header_methodID_ap_vld;
output  [15:0] header_cb;
output   header_cb_ap_vld;
output  [15:0] header_size;
output   header_size_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_V_read;
reg header_objectID_ap_vld;
reg header_methodID_ap_vld;
reg header_cb_ap_vld;
reg header_size_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    src_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_i_fu_100_p2;
wire   [1:0] it_fu_106_p2;
reg    ap_block_state2;
reg   [0:0] words32_address0;
reg    words32_ce0;
reg    words32_we0;
wire   [31:0] words32_q0;
wire   [0:0] words32_address1;
reg    words32_ce1;
wire   [31:0] words32_q1;
reg   [1:0] it_i_reg_89;
wire   [63:0] tmp_44_i_fu_112_p1;
wire    ap_CS_fsm_state3;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

getRequestHead_wobkb #(
    .DataWidth( 32 ),
    .AddressRange( 2 ),
    .AddressWidth( 1 ))
words32_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(words32_address0),
    .ce0(words32_ce0),
    .we0(words32_we0),
    .d0(src_V_dout),
    .q0(words32_q0),
    .address1(words32_address1),
    .ce1(words32_ce1),
    .q1(words32_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((tmp_i_fu_100_p2 == 1'd0) & (src_V_empty_n == 1'b0)) & (tmp_i_fu_100_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        it_i_reg_89 <= it_fu_106_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        it_i_reg_89 <= 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        header_cb_ap_vld = 1'b1;
    end else begin
        header_cb_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        header_methodID_ap_vld = 1'b1;
    end else begin
        header_methodID_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        header_objectID_ap_vld = 1'b1;
    end else begin
        header_objectID_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        header_size_ap_vld = 1'b1;
    end else begin
        header_size_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_fu_100_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        src_V_blk_n = src_V_empty_n;
    end else begin
        src_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((tmp_i_fu_100_p2 == 1'd0) & (src_V_empty_n == 1'b0)) & (tmp_i_fu_100_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        src_V_read = 1'b1;
    end else begin
        src_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((tmp_i_fu_100_p2 == 1'd1)) begin
            words32_address0 = 64'd0;
        end else if ((tmp_i_fu_100_p2 == 1'd0)) begin
            words32_address0 = tmp_44_i_fu_112_p1;
        end else begin
            words32_address0 = 'bx;
        end
    end else begin
        words32_address0 = 'bx;
    end
end

always @ (*) begin
    if (((~((tmp_i_fu_100_p2 == 1'd0) & (src_V_empty_n == 1'b0)) & (tmp_i_fu_100_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | (~((tmp_i_fu_100_p2 == 1'd0) & (src_V_empty_n == 1'b0)) & (tmp_i_fu_100_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        words32_ce0 = 1'b1;
    end else begin
        words32_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((tmp_i_fu_100_p2 == 1'd0) & (src_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        words32_ce1 = 1'b1;
    end else begin
        words32_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((tmp_i_fu_100_p2 == 1'd0) & (src_V_empty_n == 1'b0)) & (tmp_i_fu_100_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        words32_we0 = 1'b1;
    end else begin
        words32_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((tmp_i_fu_100_p2 == 1'd0) & (src_V_empty_n == 1'b0)) & (tmp_i_fu_100_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((tmp_i_fu_100_p2 == 1'd0) & (src_V_empty_n == 1'b0)) & (tmp_i_fu_100_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state2 = ((tmp_i_fu_100_p2 == 1'd0) & (src_V_empty_n == 1'b0));
end

assign header_cb = {{words32_q1[31:16]}};

assign header_methodID = {{words32_q0[15:8]}};

assign header_objectID = {{words32_q0[23:16]}};

assign header_size = words32_q1[15:0];

assign it_fu_106_p2 = (it_i_reg_89 + 2'd1);

assign tmp_44_i_fu_112_p1 = it_i_reg_89;

assign tmp_i_fu_100_p2 = ((it_i_reg_89 == 2'd2) ? 1'b1 : 1'b0);

assign words32_address1 = 64'd1;

endmodule //getRequestHead
