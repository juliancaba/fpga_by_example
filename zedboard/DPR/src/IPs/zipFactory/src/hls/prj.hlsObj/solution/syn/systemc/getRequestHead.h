// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _getRequestHead_HH_
#define _getRequestHead_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "getRequestHead_wobkb.h"

namespace ap_rtl {

struct getRequestHead : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > src_V_dout;
    sc_in< sc_logic > src_V_empty_n;
    sc_out< sc_logic > src_V_read;
    sc_out< sc_lv<8> > header_objectID;
    sc_out< sc_logic > header_objectID_ap_vld;
    sc_out< sc_lv<8> > header_methodID;
    sc_out< sc_logic > header_methodID_ap_vld;
    sc_out< sc_lv<16> > header_cb;
    sc_out< sc_logic > header_cb_ap_vld;
    sc_out< sc_lv<16> > header_size;
    sc_out< sc_logic > header_size_ap_vld;


    // Module declarations
    getRequestHead(sc_module_name name);
    SC_HAS_PROCESS(getRequestHead);

    ~getRequestHead();

    sc_trace_file* mVcdFile;

    getRequestHead_wobkb* words32_U;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > src_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_i_fu_100_p2;
    sc_signal< sc_lv<2> > it_fu_106_p2;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<1> > words32_address0;
    sc_signal< sc_logic > words32_ce0;
    sc_signal< sc_logic > words32_we0;
    sc_signal< sc_lv<32> > words32_q0;
    sc_signal< sc_lv<1> > words32_address1;
    sc_signal< sc_logic > words32_ce1;
    sc_signal< sc_lv<32> > words32_q1;
    sc_signal< sc_lv<2> > it_i_reg_89;
    sc_signal< sc_lv<64> > tmp_44_i_fu_112_p1;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_1F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_header_cb();
    void thread_header_cb_ap_vld();
    void thread_header_methodID();
    void thread_header_methodID_ap_vld();
    void thread_header_objectID();
    void thread_header_objectID_ap_vld();
    void thread_header_size();
    void thread_header_size_ap_vld();
    void thread_it_fu_106_p2();
    void thread_src_V_blk_n();
    void thread_src_V_read();
    void thread_tmp_44_i_fu_112_p1();
    void thread_tmp_i_fu_100_p2();
    void thread_words32_address0();
    void thread_words32_address1();
    void thread_words32_ce0();
    void thread_words32_ce1();
    void thread_words32_we0();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
