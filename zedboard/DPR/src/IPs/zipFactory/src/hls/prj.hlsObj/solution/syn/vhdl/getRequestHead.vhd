-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getRequestHead is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    src_V_empty_n : IN STD_LOGIC;
    src_V_read : OUT STD_LOGIC;
    header_objectID : OUT STD_LOGIC_VECTOR (7 downto 0);
    header_objectID_ap_vld : OUT STD_LOGIC;
    header_methodID : OUT STD_LOGIC_VECTOR (7 downto 0);
    header_methodID_ap_vld : OUT STD_LOGIC;
    header_cb : OUT STD_LOGIC_VECTOR (15 downto 0);
    header_cb_ap_vld : OUT STD_LOGIC;
    header_size : OUT STD_LOGIC_VECTOR (15 downto 0);
    header_size_ap_vld : OUT STD_LOGIC );
end;


architecture behav of getRequestHead is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal src_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_i_fu_100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal it_fu_106_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal words32_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal words32_ce0 : STD_LOGIC;
    signal words32_we0 : STD_LOGIC;
    signal words32_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal words32_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal words32_ce1 : STD_LOGIC;
    signal words32_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal it_i_reg_89 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_44_i_fu_112_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component getRequestHead_wobkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    words32_U : component getRequestHead_wobkb
    generic map (
        DataWidth => 32,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => words32_address0,
        ce0 => words32_ce0,
        we0 => words32_we0,
        d0 => src_V_dout,
        q0 => words32_q0,
        address1 => words32_address1,
        ce1 => words32_ce1,
        q1 => words32_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    it_i_reg_89_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((tmp_i_fu_100_p2 = ap_const_lv1_0) and (src_V_empty_n = ap_const_logic_0))) and (tmp_i_fu_100_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                it_i_reg_89 <= it_fu_106_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                it_i_reg_89 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, src_V_empty_n, ap_CS_fsm_state2, tmp_i_fu_100_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((tmp_i_fu_100_p2 = ap_const_lv1_0) and (src_V_empty_n = ap_const_logic_0))) and (tmp_i_fu_100_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((tmp_i_fu_100_p2 = ap_const_lv1_0) and (src_V_empty_n = ap_const_logic_0))) and (tmp_i_fu_100_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state2_assign_proc : process(src_V_empty_n, tmp_i_fu_100_p2)
    begin
                ap_block_state2 <= ((tmp_i_fu_100_p2 = ap_const_lv1_0) and (src_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    header_cb <= words32_q1(31 downto 16);

    header_cb_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            header_cb_ap_vld <= ap_const_logic_1;
        else 
            header_cb_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    header_methodID <= words32_q0(15 downto 8);

    header_methodID_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            header_methodID_ap_vld <= ap_const_logic_1;
        else 
            header_methodID_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    header_objectID <= words32_q0(23 downto 16);

    header_objectID_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            header_objectID_ap_vld <= ap_const_logic_1;
        else 
            header_objectID_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    header_size <= words32_q1(16 - 1 downto 0);

    header_size_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            header_size_ap_vld <= ap_const_logic_1;
        else 
            header_size_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    it_fu_106_p2 <= std_logic_vector(unsigned(it_i_reg_89) + unsigned(ap_const_lv2_1));

    src_V_blk_n_assign_proc : process(src_V_empty_n, ap_CS_fsm_state2, tmp_i_fu_100_p2)
    begin
        if (((tmp_i_fu_100_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            src_V_blk_n <= src_V_empty_n;
        else 
            src_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_V_read_assign_proc : process(src_V_empty_n, ap_CS_fsm_state2, tmp_i_fu_100_p2)
    begin
        if ((not(((tmp_i_fu_100_p2 = ap_const_lv1_0) and (src_V_empty_n = ap_const_logic_0))) and (tmp_i_fu_100_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            src_V_read <= ap_const_logic_1;
        else 
            src_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_44_i_fu_112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(it_i_reg_89),64));
    tmp_i_fu_100_p2 <= "1" when (it_i_reg_89 = ap_const_lv2_2) else "0";

    words32_address0_assign_proc : process(ap_CS_fsm_state2, tmp_i_fu_100_p2, tmp_44_i_fu_112_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
            if ((tmp_i_fu_100_p2 = ap_const_lv1_1)) then 
                words32_address0 <= ap_const_lv64_0(1 - 1 downto 0);
            elsif ((tmp_i_fu_100_p2 = ap_const_lv1_0)) then 
                words32_address0 <= tmp_44_i_fu_112_p1(1 - 1 downto 0);
            else 
                words32_address0 <= "X";
            end if;
        else 
            words32_address0 <= "X";
        end if; 
    end process;

    words32_address1 <= ap_const_lv64_1(1 - 1 downto 0);

    words32_ce0_assign_proc : process(src_V_empty_n, ap_CS_fsm_state2, tmp_i_fu_100_p2)
    begin
        if (((not(((tmp_i_fu_100_p2 = ap_const_lv1_0) and (src_V_empty_n = ap_const_logic_0))) and (tmp_i_fu_100_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((tmp_i_fu_100_p2 = ap_const_lv1_0) and (src_V_empty_n = ap_const_logic_0))) and (tmp_i_fu_100_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            words32_ce0 <= ap_const_logic_1;
        else 
            words32_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    words32_ce1_assign_proc : process(src_V_empty_n, ap_CS_fsm_state2, tmp_i_fu_100_p2)
    begin
        if ((not(((tmp_i_fu_100_p2 = ap_const_lv1_0) and (src_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            words32_ce1 <= ap_const_logic_1;
        else 
            words32_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    words32_we0_assign_proc : process(src_V_empty_n, ap_CS_fsm_state2, tmp_i_fu_100_p2)
    begin
        if ((not(((tmp_i_fu_100_p2 = ap_const_lv1_0) and (src_V_empty_n = ap_const_logic_0))) and (tmp_i_fu_100_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            words32_we0 <= ap_const_logic_1;
        else 
            words32_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
