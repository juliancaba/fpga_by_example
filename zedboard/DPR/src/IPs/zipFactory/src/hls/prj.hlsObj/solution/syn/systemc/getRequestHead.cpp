// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "getRequestHead.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic getRequestHead::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic getRequestHead::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> getRequestHead::ap_ST_fsm_state1 = "1";
const sc_lv<3> getRequestHead::ap_ST_fsm_state2 = "10";
const sc_lv<3> getRequestHead::ap_ST_fsm_state3 = "100";
const sc_lv<32> getRequestHead::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> getRequestHead::ap_const_lv32_1 = "1";
const sc_lv<1> getRequestHead::ap_const_lv1_0 = "0";
const sc_lv<1> getRequestHead::ap_const_lv1_1 = "1";
const sc_lv<2> getRequestHead::ap_const_lv2_0 = "00";
const sc_lv<64> getRequestHead::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> getRequestHead::ap_const_lv64_1 = "1";
const sc_lv<32> getRequestHead::ap_const_lv32_2 = "10";
const sc_lv<2> getRequestHead::ap_const_lv2_2 = "10";
const sc_lv<2> getRequestHead::ap_const_lv2_1 = "1";
const sc_lv<32> getRequestHead::ap_const_lv32_10 = "10000";
const sc_lv<32> getRequestHead::ap_const_lv32_17 = "10111";
const sc_lv<32> getRequestHead::ap_const_lv32_8 = "1000";
const sc_lv<32> getRequestHead::ap_const_lv32_F = "1111";
const sc_lv<32> getRequestHead::ap_const_lv32_1F = "11111";
const bool getRequestHead::ap_const_boolean_1 = true;

getRequestHead::getRequestHead(sc_module_name name) : sc_module(name), mVcdFile(0) {
    words32_U = new getRequestHead_wobkb("words32_U");
    words32_U->clk(ap_clk);
    words32_U->reset(ap_rst);
    words32_U->address0(words32_address0);
    words32_U->ce0(words32_ce0);
    words32_U->we0(words32_we0);
    words32_U->d0(src_V_dout);
    words32_U->q0(words32_q0);
    words32_U->address1(words32_address1);
    words32_U->ce1(words32_ce1);
    words32_U->q1(words32_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( src_V_empty_n );
    sensitive << ( tmp_i_fu_100_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_header_cb);
    sensitive << ( words32_q1 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_header_cb_ap_vld);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_header_methodID);
    sensitive << ( words32_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_header_methodID_ap_vld);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_header_objectID);
    sensitive << ( words32_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_header_objectID_ap_vld);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_header_size);
    sensitive << ( words32_q1 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_header_size_ap_vld);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_it_fu_106_p2);
    sensitive << ( it_i_reg_89 );

    SC_METHOD(thread_src_V_blk_n);
    sensitive << ( src_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_fu_100_p2 );

    SC_METHOD(thread_src_V_read);
    sensitive << ( src_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_fu_100_p2 );

    SC_METHOD(thread_tmp_44_i_fu_112_p1);
    sensitive << ( it_i_reg_89 );

    SC_METHOD(thread_tmp_i_fu_100_p2);
    sensitive << ( src_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_fu_100_p2 );
    sensitive << ( it_i_reg_89 );

    SC_METHOD(thread_words32_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_fu_100_p2 );
    sensitive << ( tmp_44_i_fu_112_p1 );

    SC_METHOD(thread_words32_address1);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_words32_ce0);
    sensitive << ( src_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_fu_100_p2 );

    SC_METHOD(thread_words32_ce1);
    sensitive << ( src_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_fu_100_p2 );

    SC_METHOD(thread_words32_we0);
    sensitive << ( src_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_fu_100_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_fu_100_p2 );

    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "getRequestHead_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, src_V_dout, "(port)src_V_dout");
    sc_trace(mVcdFile, src_V_empty_n, "(port)src_V_empty_n");
    sc_trace(mVcdFile, src_V_read, "(port)src_V_read");
    sc_trace(mVcdFile, header_objectID, "(port)header_objectID");
    sc_trace(mVcdFile, header_objectID_ap_vld, "(port)header_objectID_ap_vld");
    sc_trace(mVcdFile, header_methodID, "(port)header_methodID");
    sc_trace(mVcdFile, header_methodID_ap_vld, "(port)header_methodID_ap_vld");
    sc_trace(mVcdFile, header_cb, "(port)header_cb");
    sc_trace(mVcdFile, header_cb_ap_vld, "(port)header_cb_ap_vld");
    sc_trace(mVcdFile, header_size, "(port)header_size");
    sc_trace(mVcdFile, header_size_ap_vld, "(port)header_size_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, src_V_blk_n, "src_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_i_fu_100_p2, "tmp_i_fu_100_p2");
    sc_trace(mVcdFile, it_fu_106_p2, "it_fu_106_p2");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, words32_address0, "words32_address0");
    sc_trace(mVcdFile, words32_ce0, "words32_ce0");
    sc_trace(mVcdFile, words32_we0, "words32_we0");
    sc_trace(mVcdFile, words32_q0, "words32_q0");
    sc_trace(mVcdFile, words32_address1, "words32_address1");
    sc_trace(mVcdFile, words32_ce1, "words32_ce1");
    sc_trace(mVcdFile, words32_q1, "words32_q1");
    sc_trace(mVcdFile, it_i_reg_89, "it_i_reg_89");
    sc_trace(mVcdFile, tmp_44_i_fu_112_p1, "tmp_44_i_fu_112_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

getRequestHead::~getRequestHead() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete words32_U;
}

void getRequestHead::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_i_fu_100_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(tmp_i_fu_100_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, src_V_empty_n.read())))) {
        it_i_reg_89 = it_fu_106_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        it_i_reg_89 = ap_const_lv2_0;
    }
}

void getRequestHead::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void getRequestHead::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void getRequestHead::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void getRequestHead::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,1,1>(tmp_i_fu_100_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, src_V_empty_n.read()));
}

void getRequestHead::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void getRequestHead::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void getRequestHead::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void getRequestHead::thread_header_cb() {
    header_cb = words32_q1.read().range(31, 16);
}

void getRequestHead::thread_header_cb_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        header_cb_ap_vld = ap_const_logic_1;
    } else {
        header_cb_ap_vld = ap_const_logic_0;
    }
}

void getRequestHead::thread_header_methodID() {
    header_methodID = words32_q0.read().range(15, 8);
}

void getRequestHead::thread_header_methodID_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        header_methodID_ap_vld = ap_const_logic_1;
    } else {
        header_methodID_ap_vld = ap_const_logic_0;
    }
}

void getRequestHead::thread_header_objectID() {
    header_objectID = words32_q0.read().range(23, 16);
}

void getRequestHead::thread_header_objectID_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        header_objectID_ap_vld = ap_const_logic_1;
    } else {
        header_objectID_ap_vld = ap_const_logic_0;
    }
}

void getRequestHead::thread_header_size() {
    header_size = words32_q1.read().range(16-1, 0);
}

void getRequestHead::thread_header_size_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        header_size_ap_vld = ap_const_logic_1;
    } else {
        header_size_ap_vld = ap_const_logic_0;
    }
}

void getRequestHead::thread_it_fu_106_p2() {
    it_fu_106_p2 = (!it_i_reg_89.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(it_i_reg_89.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void getRequestHead::thread_src_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_i_fu_100_p2.read(), ap_const_lv1_0))) {
        src_V_blk_n = src_V_empty_n.read();
    } else {
        src_V_blk_n = ap_const_logic_1;
    }
}

void getRequestHead::thread_src_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_i_fu_100_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(tmp_i_fu_100_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, src_V_empty_n.read())))) {
        src_V_read = ap_const_logic_1;
    } else {
        src_V_read = ap_const_logic_0;
    }
}

void getRequestHead::thread_tmp_44_i_fu_112_p1() {
    tmp_44_i_fu_112_p1 = esl_zext<64,2>(it_i_reg_89.read());
}

void getRequestHead::thread_tmp_i_fu_100_p2() {
    tmp_i_fu_100_p2 = (!it_i_reg_89.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(it_i_reg_89.read() == ap_const_lv2_2);
}

void getRequestHead::thread_words32_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        if (esl_seteq<1,1,1>(tmp_i_fu_100_p2.read(), ap_const_lv1_1)) {
            words32_address0 =  (sc_lv<1>) (ap_const_lv64_0);
        } else if (esl_seteq<1,1,1>(tmp_i_fu_100_p2.read(), ap_const_lv1_0)) {
            words32_address0 =  (sc_lv<1>) (tmp_44_i_fu_112_p1.read());
        } else {
            words32_address0 = "X";
        }
    } else {
        words32_address0 = "X";
    }
}

void getRequestHead::thread_words32_address1() {
    words32_address1 =  (sc_lv<1>) (ap_const_lv64_1);
}

void getRequestHead::thread_words32_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(tmp_i_fu_100_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, src_V_empty_n.read())) && 
          esl_seteq<1,1,1>(tmp_i_fu_100_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(tmp_i_fu_100_p2.read(), ap_const_lv1_0) && 
          !(esl_seteq<1,1,1>(tmp_i_fu_100_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, src_V_empty_n.read()))))) {
        words32_ce0 = ap_const_logic_1;
    } else {
        words32_ce0 = ap_const_logic_0;
    }
}

void getRequestHead::thread_words32_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(tmp_i_fu_100_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, src_V_empty_n.read())))) {
        words32_ce1 = ap_const_logic_1;
    } else {
        words32_ce1 = ap_const_logic_0;
    }
}

void getRequestHead::thread_words32_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_i_fu_100_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(tmp_i_fu_100_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, src_V_empty_n.read())))) {
        words32_we0 = ap_const_logic_1;
    } else {
        words32_we0 = ap_const_logic_0;
    }
}

void getRequestHead::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_i_fu_100_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(tmp_i_fu_100_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, src_V_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(tmp_i_fu_100_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, src_V_empty_n.read())) && esl_seteq<1,1,1>(tmp_i_fu_100_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

}

