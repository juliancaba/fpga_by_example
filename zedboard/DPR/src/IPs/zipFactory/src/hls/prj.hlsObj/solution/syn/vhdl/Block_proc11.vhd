-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Block_proc11 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    din_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    din_V_empty_n : IN STD_LOGIC;
    din_V_read : OUT STD_LOGIC;
    dout_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    dout_V_full_n : IN STD_LOGIC;
    dout_V_write : OUT STD_LOGIC;
    prDone_V_dout : IN STD_LOGIC;
    prDone_V_empty_n : IN STD_LOGIC;
    prDone_V_read : OUT STD_LOGIC;
    pr_V_addr_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    pr_V_addr_full_n : IN STD_LOGIC;
    pr_V_addr_write : OUT STD_LOGIC;
    pr_V_areaID_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    pr_V_areaID_full_n : IN STD_LOGIC;
    pr_V_areaID_write : OUT STD_LOGIC );
end;


architecture behav of Block_proc11 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_20001 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_101 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000001";
    constant ap_const_lv32_205 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000101";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal header_objectID : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal header_methodID : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal header_cb : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal header_size : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal p_status : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal din_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_5_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dout_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_reg_375 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_379 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_383 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_nbreadreq_fu_123_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal pr_V_addr_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal pr_V_areaID_blk_n : STD_LOGIC;
    signal reg_231 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_predicate_op41_write_state3 : BOOLEAN;
    signal ap_block_state3 : BOOLEAN;
    signal tmp_4_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal it_fu_347_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state9 : BOOLEAN;
    signal words32_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal words32_ce0 : STD_LOGIC;
    signal words32_we0 : STD_LOGIC;
    signal words32_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal words32_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal words32_ce1 : STD_LOGIC;
    signal words32_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_forward_fu_197_ap_start : STD_LOGIC;
    signal grp_forward_fu_197_ap_done : STD_LOGIC;
    signal grp_forward_fu_197_ap_idle : STD_LOGIC;
    signal grp_forward_fu_197_ap_ready : STD_LOGIC;
    signal grp_forward_fu_197_src_V_read : STD_LOGIC;
    signal grp_getRequestHead_fu_204_ap_start : STD_LOGIC;
    signal grp_getRequestHead_fu_204_ap_done : STD_LOGIC;
    signal grp_getRequestHead_fu_204_ap_idle : STD_LOGIC;
    signal grp_getRequestHead_fu_204_ap_ready : STD_LOGIC;
    signal grp_getRequestHead_fu_204_src_V_read : STD_LOGIC;
    signal grp_getRequestHead_fu_204_header_objectID : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_getRequestHead_fu_204_header_objectID_ap_vld : STD_LOGIC;
    signal grp_getRequestHead_fu_204_header_methodID : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_getRequestHead_fu_204_header_methodID_ap_vld : STD_LOGIC;
    signal grp_getRequestHead_fu_204_header_cb : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_getRequestHead_fu_204_header_cb_ap_vld : STD_LOGIC;
    signal grp_getRequestHead_fu_204_header_size : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_getRequestHead_fu_204_header_size_ap_vld : STD_LOGIC;
    signal it_0_i_i_reg_186 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_grp_forward_fu_197_ap_start : STD_LOGIC := '0';
    signal ap_block_state3_ignore_call1 : BOOLEAN;
    signal ap_reg_grp_getRequestHead_fu_204_ap_start : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call7 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_10_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bufferRESP_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal bufferRESP_V_full_n : STD_LOGIC;
    signal bufferRESP_V_write : STD_LOGIC;
    signal ap_block_state6 : BOOLEAN;
    signal bufferRESP_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal bufferRESP_V_empty_n : STD_LOGIC;
    signal bufferRESP_V_read : STD_LOGIC;
    signal ap_predicate_op68_read_state8 : BOOLEAN;
    signal ap_block_state8 : BOOLEAN;
    signal words32_6_fu_276_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal words32_5_fu_293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal words32_7_fu_310_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal words32_8_fu_334_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pr_V_addr1_update : STD_LOGIC;
    signal pr_V_addr1_status : STD_LOGIC;
    signal tmp_16_fu_258_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_268_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_283_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_300_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_326_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;

    component forward IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        src_V_empty_n : IN STD_LOGIC;
        src_V_read : OUT STD_LOGIC;
        size : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component getRequestHead IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        src_V_empty_n : IN STD_LOGIC;
        src_V_read : OUT STD_LOGIC;
        header_objectID : OUT STD_LOGIC_VECTOR (7 downto 0);
        header_objectID_ap_vld : OUT STD_LOGIC;
        header_methodID : OUT STD_LOGIC_VECTOR (7 downto 0);
        header_methodID_ap_vld : OUT STD_LOGIC;
        header_cb : OUT STD_LOGIC_VECTOR (15 downto 0);
        header_cb_ap_vld : OUT STD_LOGIC;
        header_size : OUT STD_LOGIC_VECTOR (15 downto 0);
        header_size_ap_vld : OUT STD_LOGIC );
    end component;


    component getRequestHead_wobkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fifo_w32_d16_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    words32_U : component getRequestHead_wobkb
    generic map (
        DataWidth => 32,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => words32_address0,
        ce0 => words32_ce0,
        we0 => words32_we0,
        d0 => din_V_dout,
        q0 => words32_q0,
        address1 => words32_address1,
        ce1 => words32_ce1,
        q1 => words32_q1);

    grp_forward_fu_197 : component forward
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_forward_fu_197_ap_start,
        ap_done => grp_forward_fu_197_ap_done,
        ap_idle => grp_forward_fu_197_ap_idle,
        ap_ready => grp_forward_fu_197_ap_ready,
        src_V_dout => din_V_dout,
        src_V_empty_n => din_V_empty_n,
        src_V_read => grp_forward_fu_197_src_V_read,
        size => reg_231);

    grp_getRequestHead_fu_204 : component getRequestHead
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_getRequestHead_fu_204_ap_start,
        ap_done => grp_getRequestHead_fu_204_ap_done,
        ap_idle => grp_getRequestHead_fu_204_ap_idle,
        ap_ready => grp_getRequestHead_fu_204_ap_ready,
        src_V_dout => din_V_dout,
        src_V_empty_n => din_V_empty_n,
        src_V_read => grp_getRequestHead_fu_204_src_V_read,
        header_objectID => grp_getRequestHead_fu_204_header_objectID,
        header_objectID_ap_vld => grp_getRequestHead_fu_204_header_objectID_ap_vld,
        header_methodID => grp_getRequestHead_fu_204_header_methodID,
        header_methodID_ap_vld => grp_getRequestHead_fu_204_header_methodID_ap_vld,
        header_cb => grp_getRequestHead_fu_204_header_cb,
        header_cb_ap_vld => grp_getRequestHead_fu_204_header_cb_ap_vld,
        header_size => grp_getRequestHead_fu_204_header_size,
        header_size_ap_vld => grp_getRequestHead_fu_204_header_size_ap_vld);

    bufferRESP_V_fifo_U : component fifo_w32_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => bufferRESP_V_din,
        if_full_n => bufferRESP_V_full_n,
        if_write => bufferRESP_V_write,
        if_dout => bufferRESP_V_dout,
        if_empty_n => bufferRESP_V_empty_n,
        if_read => bufferRESP_V_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not((((bufferRESP_V_empty_n = ap_const_logic_0) and (ap_predicate_op68_read_state8 = ap_const_boolean_1)) or ((dout_V_full_n = ap_const_logic_0) and (ap_predicate_op68_read_state8 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state8) and ((tmp_1_reg_379 = ap_const_lv1_1) or (tmp_14_nbreadreq_fu_123_p3 = ap_const_lv1_0) or (tmp_4_reg_383 = ap_const_lv1_0) or (tmp_reg_375 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_forward_fu_197_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_forward_fu_197_ap_start <= ap_const_logic_0;
            else
                if (((not(((dout_V_full_n = ap_const_logic_0) and (ap_predicate_op41_write_state3 = ap_const_boolean_1))) and (tmp_fu_240_p2 = ap_const_lv1_1) and (tmp_1_fu_246_p2 = ap_const_lv1_0) and (tmp_4_fu_252_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((dout_V_full_n = ap_const_logic_0) and (ap_predicate_op41_write_state3 = ap_const_boolean_1))) and (tmp_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    ap_reg_grp_forward_fu_197_ap_start <= ap_const_logic_1;
                elsif ((grp_forward_fu_197_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_forward_fu_197_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_getRequestHead_fu_204_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_getRequestHead_fu_204_ap_start <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_reg_grp_getRequestHead_fu_204_ap_start <= ap_const_logic_1;
                elsif ((grp_getRequestHead_fu_204_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_getRequestHead_fu_204_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    it_0_i_i_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((tmp_5_fu_341_p2 = ap_const_lv1_0) and (din_V_empty_n = ap_const_logic_0))) and (tmp_5_fu_341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                it_0_i_i_reg_186 <= it_fu_347_p2;
            elsif ((not(((dout_V_full_n = ap_const_logic_0) and (ap_predicate_op41_write_state3 = ap_const_boolean_1))) and (tmp_1_fu_246_p2 = ap_const_lv1_1) and (tmp_fu_240_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                it_0_i_i_reg_186 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_status_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((tmp_5_fu_341_p2 = ap_const_lv1_0) and (din_V_empty_n = ap_const_logic_0))) and (tmp_5_fu_341_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                p_status(0) <= '0';
                p_status(1) <= '1';
            elsif ((not(((dout_V_full_n = ap_const_logic_0) and (ap_predicate_op41_write_state3 = ap_const_boolean_1))) and (tmp_16_fu_258_p1 = ap_const_lv1_1) and (tmp_4_fu_252_p2 = ap_const_lv1_1) and (tmp_fu_240_p2 = ap_const_lv1_1) and (tmp_1_fu_246_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_status(0) <= '1';
                p_status(1) <= '0';
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_getRequestHead_fu_204_header_cb_ap_vld = ap_const_logic_1))) then
                header_cb <= grp_getRequestHead_fu_204_header_cb;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_getRequestHead_fu_204_header_methodID_ap_vld = ap_const_logic_1))) then
                header_methodID <= grp_getRequestHead_fu_204_header_methodID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_getRequestHead_fu_204_header_objectID_ap_vld = ap_const_logic_1))) then
                header_objectID <= grp_getRequestHead_fu_204_header_objectID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_getRequestHead_fu_204_header_size_ap_vld = ap_const_logic_1))) then
                header_size <= grp_getRequestHead_fu_204_header_size;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((dout_V_full_n = ap_const_logic_0) and (ap_predicate_op41_write_state3 = ap_const_boolean_1))) and (tmp_fu_240_p2 = ap_const_lv1_1) and (tmp_1_fu_246_p2 = ap_const_lv1_0) and (tmp_4_fu_252_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((dout_V_full_n = ap_const_logic_0) and (ap_predicate_op41_write_state3 = ap_const_boolean_1))) and (tmp_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then
                reg_231 <= header_size;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((dout_V_full_n = ap_const_logic_0) and (ap_predicate_op41_write_state3 = ap_const_boolean_1))) and (tmp_fu_240_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_1_reg_379 <= tmp_1_fu_246_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((dout_V_full_n = ap_const_logic_0) and (ap_predicate_op41_write_state3 = ap_const_boolean_1))) and (tmp_fu_240_p2 = ap_const_lv1_1) and (tmp_1_fu_246_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_4_reg_383 <= tmp_4_fu_252_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((dout_V_full_n = ap_const_logic_0) and (ap_predicate_op41_write_state3 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_reg_375 <= tmp_fu_240_p2;
            end if;
        end if;
    end process;
    p_status(3 downto 2) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, din_V_empty_n, dout_V_full_n, ap_CS_fsm_state9, tmp_5_fu_341_p2, ap_CS_fsm_state4, ap_CS_fsm_state3, tmp_fu_240_p2, tmp_1_fu_246_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, tmp_reg_375, tmp_1_reg_379, tmp_4_reg_383, tmp_14_nbreadreq_fu_123_p3, ap_CS_fsm_state10, ap_predicate_op41_write_state3, tmp_4_fu_252_p2, grp_forward_fu_197_ap_done, grp_getRequestHead_fu_204_ap_done, ap_CS_fsm_state2, bufferRESP_V_full_n, bufferRESP_V_empty_n, ap_predicate_op68_read_state8, pr_V_addr1_status)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_getRequestHead_fu_204_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((dout_V_full_n = ap_const_logic_0) and (ap_predicate_op41_write_state3 = ap_const_boolean_1))) and (tmp_1_fu_246_p2 = ap_const_lv1_1) and (tmp_fu_240_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif ((not(((dout_V_full_n = ap_const_logic_0) and (ap_predicate_op41_write_state3 = ap_const_boolean_1))) and (tmp_4_fu_252_p2 = ap_const_lv1_1) and (tmp_fu_240_p2 = ap_const_lv1_1) and (tmp_1_fu_246_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif ((not(((dout_V_full_n = ap_const_logic_0) and (ap_predicate_op41_write_state3 = ap_const_boolean_1))) and (tmp_fu_240_p2 = ap_const_lv1_1) and (tmp_1_fu_246_p2 = ap_const_lv1_0) and (tmp_4_fu_252_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif ((not(((dout_V_full_n = ap_const_logic_0) and (ap_predicate_op41_write_state3 = ap_const_boolean_1))) and (tmp_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((dout_V_full_n = ap_const_logic_0) or (grp_forward_fu_197_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((dout_V_full_n = ap_const_logic_0) or (grp_forward_fu_197_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((dout_V_full_n = ap_const_logic_0) or (bufferRESP_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((dout_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if ((not((((bufferRESP_V_empty_n = ap_const_logic_0) and (ap_predicate_op68_read_state8 = ap_const_boolean_1)) or ((dout_V_full_n = ap_const_logic_0) and (ap_predicate_op68_read_state8 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state8) and ((tmp_1_reg_379 = ap_const_lv1_1) or (tmp_14_nbreadreq_fu_123_p3 = ap_const_lv1_0) or (tmp_4_reg_383 = ap_const_lv1_0) or (tmp_reg_375 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not((((bufferRESP_V_empty_n = ap_const_logic_0) and (ap_predicate_op68_read_state8 = ap_const_boolean_1)) or ((dout_V_full_n = ap_const_logic_0) and (ap_predicate_op68_read_state8 = ap_const_boolean_1)))) and (tmp_14_nbreadreq_fu_123_p3 = ap_const_lv1_1) and (tmp_4_reg_383 = ap_const_lv1_1) and (tmp_reg_375 = ap_const_lv1_1) and (tmp_1_reg_379 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not(((tmp_5_fu_341_p2 = ap_const_lv1_0) and (din_V_empty_n = ap_const_logic_0))) and (tmp_5_fu_341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif ((not(((tmp_5_fu_341_p2 = ap_const_lv1_0) and (din_V_empty_n = ap_const_logic_0))) and (tmp_5_fu_341_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((pr_V_addr1_status = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call7_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call7 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_assign_proc : process(dout_V_full_n, ap_predicate_op41_write_state3)
    begin
                ap_block_state3 <= ((dout_V_full_n = ap_const_logic_0) and (ap_predicate_op41_write_state3 = ap_const_boolean_1));
    end process;


    ap_block_state3_ignore_call1_assign_proc : process(dout_V_full_n, ap_predicate_op41_write_state3)
    begin
                ap_block_state3_ignore_call1 <= ((dout_V_full_n = ap_const_logic_0) and (ap_predicate_op41_write_state3 = ap_const_boolean_1));
    end process;


    ap_block_state6_assign_proc : process(dout_V_full_n, bufferRESP_V_full_n)
    begin
                ap_block_state6 <= ((dout_V_full_n = ap_const_logic_0) or (bufferRESP_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state8_assign_proc : process(dout_V_full_n, bufferRESP_V_empty_n, ap_predicate_op68_read_state8)
    begin
                ap_block_state8 <= (((bufferRESP_V_empty_n = ap_const_logic_0) and (ap_predicate_op68_read_state8 = ap_const_boolean_1)) or ((dout_V_full_n = ap_const_logic_0) and (ap_predicate_op68_read_state8 = ap_const_boolean_1)));
    end process;


    ap_block_state9_assign_proc : process(din_V_empty_n, tmp_5_fu_341_p2)
    begin
                ap_block_state9 <= ((tmp_5_fu_341_p2 = ap_const_lv1_0) and (din_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, dout_V_full_n, ap_CS_fsm_state8, tmp_reg_375, tmp_1_reg_379, tmp_4_reg_383, tmp_14_nbreadreq_fu_123_p3, bufferRESP_V_empty_n, ap_predicate_op68_read_state8)
    begin
        if ((not((((bufferRESP_V_empty_n = ap_const_logic_0) and (ap_predicate_op68_read_state8 = ap_const_boolean_1)) or ((dout_V_full_n = ap_const_logic_0) and (ap_predicate_op68_read_state8 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state8) and ((tmp_1_reg_379 = ap_const_lv1_1) or (tmp_14_nbreadreq_fu_123_p3 = ap_const_lv1_0) or (tmp_4_reg_383 = ap_const_lv1_0) or (tmp_reg_375 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op41_write_state3_assign_proc : process(tmp_fu_240_p2, tmp_1_fu_246_p2)
    begin
                ap_predicate_op41_write_state3 <= ((tmp_1_fu_246_p2 = ap_const_lv1_1) and (tmp_fu_240_p2 = ap_const_lv1_1));
    end process;


    ap_predicate_op68_read_state8_assign_proc : process(tmp_reg_375, tmp_1_reg_379, tmp_4_reg_383, tmp_14_nbreadreq_fu_123_p3)
    begin
                ap_predicate_op68_read_state8 <= ((tmp_14_nbreadreq_fu_123_p3 = ap_const_lv1_1) and (tmp_4_reg_383 = ap_const_lv1_1) and (tmp_reg_375 = ap_const_lv1_1) and (tmp_1_reg_379 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(dout_V_full_n, ap_CS_fsm_state8, tmp_reg_375, tmp_1_reg_379, tmp_4_reg_383, tmp_14_nbreadreq_fu_123_p3, bufferRESP_V_empty_n, ap_predicate_op68_read_state8)
    begin
        if ((not((((bufferRESP_V_empty_n = ap_const_logic_0) and (ap_predicate_op68_read_state8 = ap_const_boolean_1)) or ((dout_V_full_n = ap_const_logic_0) and (ap_predicate_op68_read_state8 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state8) and ((tmp_1_reg_379 = ap_const_lv1_1) or (tmp_14_nbreadreq_fu_123_p3 = ap_const_lv1_0) or (tmp_4_reg_383 = ap_const_lv1_0) or (tmp_reg_375 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bufferRESP_V_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_status),32));

    bufferRESP_V_read_assign_proc : process(dout_V_full_n, ap_CS_fsm_state8, bufferRESP_V_empty_n, ap_predicate_op68_read_state8)
    begin
        if ((not((((bufferRESP_V_empty_n = ap_const_logic_0) and (ap_predicate_op68_read_state8 = ap_const_boolean_1)) or ((dout_V_full_n = ap_const_logic_0) and (ap_predicate_op68_read_state8 = ap_const_boolean_1)))) and (ap_predicate_op68_read_state8 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            bufferRESP_V_read <= ap_const_logic_1;
        else 
            bufferRESP_V_read <= ap_const_logic_0;
        end if; 
    end process;


    bufferRESP_V_write_assign_proc : process(dout_V_full_n, ap_CS_fsm_state6, bufferRESP_V_full_n)
    begin
        if ((not(((dout_V_full_n = ap_const_logic_0) or (bufferRESP_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            bufferRESP_V_write <= ap_const_logic_1;
        else 
            bufferRESP_V_write <= ap_const_logic_0;
        end if; 
    end process;


    din_V_blk_n_assign_proc : process(din_V_empty_n, ap_CS_fsm_state9, tmp_5_fu_341_p2)
    begin
        if (((tmp_5_fu_341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            din_V_blk_n <= din_V_empty_n;
        else 
            din_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    din_V_read_assign_proc : process(din_V_empty_n, ap_CS_fsm_state9, tmp_5_fu_341_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_forward_fu_197_src_V_read, grp_getRequestHead_fu_204_src_V_read, ap_CS_fsm_state2)
    begin
        if ((not(((tmp_5_fu_341_p2 = ap_const_lv1_0) and (din_V_empty_n = ap_const_logic_0))) and (tmp_5_fu_341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            din_V_read <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            din_V_read <= grp_getRequestHead_fu_204_src_V_read;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            din_V_read <= grp_forward_fu_197_src_V_read;
        else 
            din_V_read <= ap_const_logic_0;
        end if; 
    end process;


    dout_V_blk_n_assign_proc : process(dout_V_full_n, ap_CS_fsm_state4, ap_CS_fsm_state3, tmp_fu_240_p2, tmp_1_fu_246_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, tmp_reg_375, tmp_1_reg_379, tmp_4_reg_383, tmp_14_nbreadreq_fu_123_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_1_fu_246_p2 = ap_const_lv1_1) and (tmp_fu_240_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((tmp_14_nbreadreq_fu_123_p3 = ap_const_lv1_1) and (tmp_4_reg_383 = ap_const_lv1_1) and (tmp_reg_375 = ap_const_lv1_1) and (tmp_1_reg_379 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            dout_V_blk_n <= dout_V_full_n;
        else 
            dout_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dout_V_din_assign_proc : process(dout_V_full_n, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_predicate_op41_write_state3, grp_forward_fu_197_ap_done, bufferRESP_V_full_n, bufferRESP_V_dout, bufferRESP_V_empty_n, ap_predicate_op68_read_state8, words32_6_fu_276_p2, words32_5_fu_293_p2, words32_7_fu_310_p2, words32_8_fu_334_p2)
    begin
        if ((not((((bufferRESP_V_empty_n = ap_const_logic_0) and (ap_predicate_op68_read_state8 = ap_const_boolean_1)) or ((dout_V_full_n = ap_const_logic_0) and (ap_predicate_op68_read_state8 = ap_const_boolean_1)))) and (ap_predicate_op68_read_state8 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            dout_V_din <= bufferRESP_V_dout;
        elsif (((dout_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            dout_V_din <= ap_const_lv32_20001;
        elsif ((not(((dout_V_full_n = ap_const_logic_0) or (bufferRESP_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            dout_V_din <= words32_8_fu_334_p2;
        elsif ((not(((dout_V_full_n = ap_const_logic_0) or (grp_forward_fu_197_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            dout_V_din <= words32_7_fu_310_p2;
        elsif ((not(((dout_V_full_n = ap_const_logic_0) or (grp_forward_fu_197_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            dout_V_din <= words32_5_fu_293_p2;
        elsif ((not(((dout_V_full_n = ap_const_logic_0) and (ap_predicate_op41_write_state3 = ap_const_boolean_1))) and (ap_predicate_op41_write_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dout_V_din <= words32_6_fu_276_p2;
        else 
            dout_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dout_V_write_assign_proc : process(dout_V_full_n, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_predicate_op41_write_state3, grp_forward_fu_197_ap_done, bufferRESP_V_full_n, bufferRESP_V_empty_n, ap_predicate_op68_read_state8)
    begin
        if (((not(((dout_V_full_n = ap_const_logic_0) or (bufferRESP_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((dout_V_full_n = ap_const_logic_0) or (grp_forward_fu_197_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((dout_V_full_n = ap_const_logic_0) and (ap_predicate_op41_write_state3 = ap_const_boolean_1))) and (ap_predicate_op41_write_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((dout_V_full_n = ap_const_logic_0) or (grp_forward_fu_197_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not((((bufferRESP_V_empty_n = ap_const_logic_0) and (ap_predicate_op68_read_state8 = ap_const_boolean_1)) or ((dout_V_full_n = ap_const_logic_0) and (ap_predicate_op68_read_state8 = ap_const_boolean_1)))) and (ap_predicate_op68_read_state8 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((dout_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            dout_V_write <= ap_const_logic_1;
        else 
            dout_V_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_forward_fu_197_ap_start <= ap_reg_grp_forward_fu_197_ap_start;
    grp_getRequestHead_fu_204_ap_start <= ap_reg_grp_getRequestHead_fu_204_ap_start;
    it_fu_347_p2 <= std_logic_vector(unsigned(it_0_i_i_reg_186) + unsigned(ap_const_lv2_1));

    prDone_V_read_assign_proc : process(dout_V_full_n, prDone_V_empty_n, ap_CS_fsm_state3, tmp_fu_240_p2, tmp_1_fu_246_p2, ap_predicate_op41_write_state3, tmp_4_fu_252_p2)
    begin
        if ((not(((dout_V_full_n = ap_const_logic_0) and (ap_predicate_op41_write_state3 = ap_const_boolean_1))) and (tmp_4_fu_252_p2 = ap_const_lv1_1) and (tmp_fu_240_p2 = ap_const_lv1_1) and (tmp_1_fu_246_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (prDone_V_empty_n = ap_const_logic_1))) then 
            prDone_V_read <= ap_const_logic_1;
        else 
            prDone_V_read <= ap_const_logic_0;
        end if; 
    end process;

    pr_V_addr1_status <= (pr_V_areaID_full_n and pr_V_addr_full_n);

    pr_V_addr1_update_assign_proc : process(ap_CS_fsm_state10, pr_V_addr1_status)
    begin
        if (((pr_V_addr1_status = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            pr_V_addr1_update <= ap_const_logic_1;
        else 
            pr_V_addr1_update <= ap_const_logic_0;
        end if; 
    end process;


    pr_V_addr_blk_n_assign_proc : process(pr_V_addr_full_n, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pr_V_addr_blk_n <= pr_V_addr_full_n;
        else 
            pr_V_addr_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    pr_V_addr_din <= words32_q0;
    pr_V_addr_write <= pr_V_addr1_update;

    pr_V_areaID_blk_n_assign_proc : process(pr_V_areaID_full_n, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pr_V_areaID_blk_n <= pr_V_areaID_full_n;
        else 
            pr_V_areaID_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    pr_V_areaID_din <= words32_q1(31 downto 16);
    pr_V_areaID_write <= pr_V_addr1_update;
    tmp_10_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(it_0_i_i_reg_186),64));
    tmp_12_fu_326_p3 <= (header_cb & ap_const_lv16_0);
    tmp_14_nbreadreq_fu_123_p3 <= (0=>bufferRESP_V_empty_n, others=>'-');
    tmp_16_fu_258_p1 <= (0=>prDone_V_dout, others=>'-');
    tmp_1_fu_246_p2 <= "1" when (header_methodID = ap_const_lv8_1) else "0";
    tmp_4_fu_252_p2 <= "1" when (header_methodID = ap_const_lv8_2) else "0";
    tmp_5_fu_341_p2 <= "1" when (it_0_i_i_reg_186 = ap_const_lv2_2) else "0";
    tmp_6_fu_283_p4 <= ((header_cb & header_methodID) & ap_const_lv8_0);
    tmp_7_fu_300_p4 <= ((header_cb & header_methodID) & ap_const_lv8_0);
    tmp_fu_240_p2 <= "1" when (header_objectID = ap_const_lv8_2) else "0";
    tmp_s_fu_268_p3 <= (header_cb & ap_const_lv16_0);
    words32_5_fu_293_p2 <= (tmp_6_fu_283_p4 or ap_const_lv32_3);
    words32_6_fu_276_p2 <= (tmp_s_fu_268_p3 or ap_const_lv32_101);
    words32_7_fu_310_p2 <= (tmp_7_fu_300_p4 or ap_const_lv32_3);
    words32_8_fu_334_p2 <= (tmp_12_fu_326_p3 or ap_const_lv32_205);

    words32_address0_assign_proc : process(ap_CS_fsm_state9, tmp_5_fu_341_p2, tmp_10_fu_353_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
            if ((tmp_5_fu_341_p2 = ap_const_lv1_1)) then 
                words32_address0 <= ap_const_lv64_0(1 - 1 downto 0);
            elsif ((tmp_5_fu_341_p2 = ap_const_lv1_0)) then 
                words32_address0 <= tmp_10_fu_353_p1(1 - 1 downto 0);
            else 
                words32_address0 <= "X";
            end if;
        else 
            words32_address0 <= "X";
        end if; 
    end process;

    words32_address1 <= ap_const_lv64_1(1 - 1 downto 0);

    words32_ce0_assign_proc : process(din_V_empty_n, ap_CS_fsm_state9, tmp_5_fu_341_p2)
    begin
        if (((not(((tmp_5_fu_341_p2 = ap_const_lv1_0) and (din_V_empty_n = ap_const_logic_0))) and (tmp_5_fu_341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not(((tmp_5_fu_341_p2 = ap_const_lv1_0) and (din_V_empty_n = ap_const_logic_0))) and (tmp_5_fu_341_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            words32_ce0 <= ap_const_logic_1;
        else 
            words32_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    words32_ce1_assign_proc : process(din_V_empty_n, ap_CS_fsm_state9, tmp_5_fu_341_p2)
    begin
        if ((not(((tmp_5_fu_341_p2 = ap_const_lv1_0) and (din_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            words32_ce1 <= ap_const_logic_1;
        else 
            words32_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    words32_we0_assign_proc : process(din_V_empty_n, ap_CS_fsm_state9, tmp_5_fu_341_p2)
    begin
        if ((not(((tmp_5_fu_341_p2 = ap_const_lv1_0) and (din_V_empty_n = ap_const_logic_0))) and (tmp_5_fu_341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            words32_we0 <= ap_const_logic_1;
        else 
            words32_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
