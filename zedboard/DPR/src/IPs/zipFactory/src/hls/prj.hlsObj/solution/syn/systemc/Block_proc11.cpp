// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Block_proc11.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Block_proc11::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Block_proc11::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> Block_proc11::ap_ST_fsm_state1 = "1";
const sc_lv<10> Block_proc11::ap_ST_fsm_state2 = "10";
const sc_lv<10> Block_proc11::ap_ST_fsm_state3 = "100";
const sc_lv<10> Block_proc11::ap_ST_fsm_state4 = "1000";
const sc_lv<10> Block_proc11::ap_ST_fsm_state5 = "10000";
const sc_lv<10> Block_proc11::ap_ST_fsm_state6 = "100000";
const sc_lv<10> Block_proc11::ap_ST_fsm_state7 = "1000000";
const sc_lv<10> Block_proc11::ap_ST_fsm_state8 = "10000000";
const sc_lv<10> Block_proc11::ap_ST_fsm_state9 = "100000000";
const sc_lv<10> Block_proc11::ap_ST_fsm_state10 = "1000000000";
const sc_lv<32> Block_proc11::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool Block_proc11::ap_const_boolean_1 = true;
const sc_lv<8> Block_proc11::ap_const_lv8_0 = "00000000";
const sc_lv<16> Block_proc11::ap_const_lv16_0 = "0000000000000000";
const sc_lv<32> Block_proc11::ap_const_lv32_8 = "1000";
const sc_lv<1> Block_proc11::ap_const_lv1_0 = "0";
const sc_lv<32> Block_proc11::ap_const_lv32_3 = "11";
const sc_lv<32> Block_proc11::ap_const_lv32_2 = "10";
const sc_lv<1> Block_proc11::ap_const_lv1_1 = "1";
const sc_lv<32> Block_proc11::ap_const_lv32_4 = "100";
const sc_lv<32> Block_proc11::ap_const_lv32_5 = "101";
const sc_lv<32> Block_proc11::ap_const_lv32_6 = "110";
const sc_lv<32> Block_proc11::ap_const_lv32_7 = "111";
const sc_lv<32> Block_proc11::ap_const_lv32_9 = "1001";
const sc_lv<2> Block_proc11::ap_const_lv2_0 = "00";
const sc_lv<32> Block_proc11::ap_const_lv32_1 = "1";
const sc_lv<64> Block_proc11::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> Block_proc11::ap_const_lv64_1 = "1";
const sc_lv<32> Block_proc11::ap_const_lv32_20001 = "100000000000000001";
const sc_lv<4> Block_proc11::ap_const_lv4_1 = "1";
const sc_lv<4> Block_proc11::ap_const_lv4_2 = "10";
const sc_lv<8> Block_proc11::ap_const_lv8_2 = "10";
const sc_lv<8> Block_proc11::ap_const_lv8_1 = "1";
const sc_lv<32> Block_proc11::ap_const_lv32_101 = "100000001";
const sc_lv<32> Block_proc11::ap_const_lv32_205 = "1000000101";
const sc_lv<2> Block_proc11::ap_const_lv2_2 = "10";
const sc_lv<2> Block_proc11::ap_const_lv2_1 = "1";
const sc_lv<32> Block_proc11::ap_const_lv32_10 = "10000";
const sc_lv<32> Block_proc11::ap_const_lv32_1F = "11111";

Block_proc11::Block_proc11(sc_module_name name) : sc_module(name), mVcdFile(0) {
    words32_U = new getRequestHead_wobkb("words32_U");
    words32_U->clk(ap_clk);
    words32_U->reset(ap_rst);
    words32_U->address0(words32_address0);
    words32_U->ce0(words32_ce0);
    words32_U->we0(words32_we0);
    words32_U->d0(din_V_dout);
    words32_U->q0(words32_q0);
    words32_U->address1(words32_address1);
    words32_U->ce1(words32_ce1);
    words32_U->q1(words32_q1);
    grp_forward_fu_197 = new forward("grp_forward_fu_197");
    grp_forward_fu_197->ap_clk(ap_clk);
    grp_forward_fu_197->ap_rst(ap_rst);
    grp_forward_fu_197->ap_start(grp_forward_fu_197_ap_start);
    grp_forward_fu_197->ap_done(grp_forward_fu_197_ap_done);
    grp_forward_fu_197->ap_idle(grp_forward_fu_197_ap_idle);
    grp_forward_fu_197->ap_ready(grp_forward_fu_197_ap_ready);
    grp_forward_fu_197->src_V_dout(din_V_dout);
    grp_forward_fu_197->src_V_empty_n(din_V_empty_n);
    grp_forward_fu_197->src_V_read(grp_forward_fu_197_src_V_read);
    grp_forward_fu_197->size(reg_231);
    grp_getRequestHead_fu_204 = new getRequestHead("grp_getRequestHead_fu_204");
    grp_getRequestHead_fu_204->ap_clk(ap_clk);
    grp_getRequestHead_fu_204->ap_rst(ap_rst);
    grp_getRequestHead_fu_204->ap_start(grp_getRequestHead_fu_204_ap_start);
    grp_getRequestHead_fu_204->ap_done(grp_getRequestHead_fu_204_ap_done);
    grp_getRequestHead_fu_204->ap_idle(grp_getRequestHead_fu_204_ap_idle);
    grp_getRequestHead_fu_204->ap_ready(grp_getRequestHead_fu_204_ap_ready);
    grp_getRequestHead_fu_204->src_V_dout(din_V_dout);
    grp_getRequestHead_fu_204->src_V_empty_n(din_V_empty_n);
    grp_getRequestHead_fu_204->src_V_read(grp_getRequestHead_fu_204_src_V_read);
    grp_getRequestHead_fu_204->header_objectID(grp_getRequestHead_fu_204_header_objectID);
    grp_getRequestHead_fu_204->header_objectID_ap_vld(grp_getRequestHead_fu_204_header_objectID_ap_vld);
    grp_getRequestHead_fu_204->header_methodID(grp_getRequestHead_fu_204_header_methodID);
    grp_getRequestHead_fu_204->header_methodID_ap_vld(grp_getRequestHead_fu_204_header_methodID_ap_vld);
    grp_getRequestHead_fu_204->header_cb(grp_getRequestHead_fu_204_header_cb);
    grp_getRequestHead_fu_204->header_cb_ap_vld(grp_getRequestHead_fu_204_header_cb_ap_vld);
    grp_getRequestHead_fu_204->header_size(grp_getRequestHead_fu_204_header_size);
    grp_getRequestHead_fu_204->header_size_ap_vld(grp_getRequestHead_fu_204_header_size_ap_vld);
    bufferRESP_V_fifo_U = new fifo_w32_d16_A("bufferRESP_V_fifo_U");
    bufferRESP_V_fifo_U->clk(ap_clk);
    bufferRESP_V_fifo_U->reset(ap_rst);
    bufferRESP_V_fifo_U->if_read_ce(ap_var_for_const0);
    bufferRESP_V_fifo_U->if_write_ce(ap_var_for_const0);
    bufferRESP_V_fifo_U->if_din(bufferRESP_V_din);
    bufferRESP_V_fifo_U->if_full_n(bufferRESP_V_full_n);
    bufferRESP_V_fifo_U->if_write(bufferRESP_V_write);
    bufferRESP_V_fifo_U->if_dout(bufferRESP_V_dout);
    bufferRESP_V_fifo_U->if_empty_n(bufferRESP_V_empty_n);
    bufferRESP_V_fifo_U->if_read(bufferRESP_V_read);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state1_ignore_call7);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state3);
    sensitive << ( dout_V_full_n );
    sensitive << ( ap_predicate_op41_write_state3 );

    SC_METHOD(thread_ap_block_state3_ignore_call1);
    sensitive << ( dout_V_full_n );
    sensitive << ( ap_predicate_op41_write_state3 );

    SC_METHOD(thread_ap_block_state6);
    sensitive << ( dout_V_full_n );
    sensitive << ( bufferRESP_V_full_n );

    SC_METHOD(thread_ap_block_state8);
    sensitive << ( dout_V_full_n );
    sensitive << ( bufferRESP_V_empty_n );
    sensitive << ( ap_predicate_op68_read_state8 );

    SC_METHOD(thread_ap_block_state9);
    sensitive << ( din_V_empty_n );
    sensitive << ( tmp_5_fu_341_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( dout_V_full_n );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( tmp_reg_375 );
    sensitive << ( tmp_1_reg_379 );
    sensitive << ( tmp_4_reg_383 );
    sensitive << ( tmp_14_nbreadreq_fu_123_p3 );
    sensitive << ( bufferRESP_V_empty_n );
    sensitive << ( ap_predicate_op68_read_state8 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_predicate_op41_write_state3);
    sensitive << ( tmp_fu_240_p2 );
    sensitive << ( tmp_1_fu_246_p2 );

    SC_METHOD(thread_ap_predicate_op68_read_state8);
    sensitive << ( tmp_reg_375 );
    sensitive << ( tmp_1_reg_379 );
    sensitive << ( tmp_4_reg_383 );
    sensitive << ( tmp_14_nbreadreq_fu_123_p3 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( dout_V_full_n );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( tmp_reg_375 );
    sensitive << ( tmp_1_reg_379 );
    sensitive << ( tmp_4_reg_383 );
    sensitive << ( tmp_14_nbreadreq_fu_123_p3 );
    sensitive << ( bufferRESP_V_empty_n );
    sensitive << ( ap_predicate_op68_read_state8 );

    SC_METHOD(thread_bufferRESP_V_din);
    sensitive << ( dout_V_full_n );
    sensitive << ( p_status );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( bufferRESP_V_full_n );

    SC_METHOD(thread_bufferRESP_V_read);
    sensitive << ( dout_V_full_n );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( bufferRESP_V_empty_n );
    sensitive << ( ap_predicate_op68_read_state8 );

    SC_METHOD(thread_bufferRESP_V_write);
    sensitive << ( dout_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( bufferRESP_V_full_n );

    SC_METHOD(thread_din_V_blk_n);
    sensitive << ( din_V_empty_n );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_5_fu_341_p2 );

    SC_METHOD(thread_din_V_read);
    sensitive << ( din_V_empty_n );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_5_fu_341_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_forward_fu_197_src_V_read );
    sensitive << ( grp_getRequestHead_fu_204_src_V_read );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_dout_V_blk_n);
    sensitive << ( dout_V_full_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_240_p2 );
    sensitive << ( tmp_1_fu_246_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( tmp_reg_375 );
    sensitive << ( tmp_1_reg_379 );
    sensitive << ( tmp_4_reg_383 );
    sensitive << ( tmp_14_nbreadreq_fu_123_p3 );

    SC_METHOD(thread_dout_V_din);
    sensitive << ( dout_V_full_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_predicate_op41_write_state3 );
    sensitive << ( grp_forward_fu_197_ap_done );
    sensitive << ( bufferRESP_V_full_n );
    sensitive << ( bufferRESP_V_dout );
    sensitive << ( bufferRESP_V_empty_n );
    sensitive << ( ap_predicate_op68_read_state8 );
    sensitive << ( words32_6_fu_276_p2 );
    sensitive << ( words32_5_fu_293_p2 );
    sensitive << ( words32_7_fu_310_p2 );
    sensitive << ( words32_8_fu_334_p2 );

    SC_METHOD(thread_dout_V_write);
    sensitive << ( dout_V_full_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_predicate_op41_write_state3 );
    sensitive << ( grp_forward_fu_197_ap_done );
    sensitive << ( bufferRESP_V_full_n );
    sensitive << ( bufferRESP_V_empty_n );
    sensitive << ( ap_predicate_op68_read_state8 );

    SC_METHOD(thread_grp_forward_fu_197_ap_start);
    sensitive << ( ap_reg_grp_forward_fu_197_ap_start );

    SC_METHOD(thread_grp_getRequestHead_fu_204_ap_start);
    sensitive << ( ap_reg_grp_getRequestHead_fu_204_ap_start );

    SC_METHOD(thread_it_fu_347_p2);
    sensitive << ( it_0_i_i_reg_186 );

    SC_METHOD(thread_prDone_V_read);
    sensitive << ( dout_V_full_n );
    sensitive << ( prDone_V_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_240_p2 );
    sensitive << ( tmp_1_fu_246_p2 );
    sensitive << ( ap_predicate_op41_write_state3 );
    sensitive << ( tmp_4_fu_252_p2 );

    SC_METHOD(thread_pr_V_addr1_status);
    sensitive << ( pr_V_addr_full_n );
    sensitive << ( pr_V_areaID_full_n );

    SC_METHOD(thread_pr_V_addr1_update);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( pr_V_addr1_status );

    SC_METHOD(thread_pr_V_addr_blk_n);
    sensitive << ( pr_V_addr_full_n );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_pr_V_addr_din);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( words32_q0 );
    sensitive << ( pr_V_addr1_status );

    SC_METHOD(thread_pr_V_addr_write);
    sensitive << ( pr_V_addr1_update );

    SC_METHOD(thread_pr_V_areaID_blk_n);
    sensitive << ( pr_V_areaID_full_n );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_pr_V_areaID_din);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( words32_q1 );
    sensitive << ( pr_V_addr1_status );

    SC_METHOD(thread_pr_V_areaID_write);
    sensitive << ( pr_V_addr1_update );

    SC_METHOD(thread_tmp_10_fu_353_p1);
    sensitive << ( it_0_i_i_reg_186 );

    SC_METHOD(thread_tmp_12_fu_326_p3);
    sensitive << ( header_cb );

    SC_METHOD(thread_tmp_14_nbreadreq_fu_123_p3);
    sensitive << ( bufferRESP_V_empty_n );

    SC_METHOD(thread_tmp_16_fu_258_p1);
    sensitive << ( prDone_V_dout );

    SC_METHOD(thread_tmp_1_fu_246_p2);
    sensitive << ( dout_V_full_n );
    sensitive << ( header_methodID );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_240_p2 );
    sensitive << ( ap_predicate_op41_write_state3 );

    SC_METHOD(thread_tmp_4_fu_252_p2);
    sensitive << ( dout_V_full_n );
    sensitive << ( header_methodID );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_240_p2 );
    sensitive << ( tmp_1_fu_246_p2 );
    sensitive << ( ap_predicate_op41_write_state3 );

    SC_METHOD(thread_tmp_5_fu_341_p2);
    sensitive << ( din_V_empty_n );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_5_fu_341_p2 );
    sensitive << ( it_0_i_i_reg_186 );

    SC_METHOD(thread_tmp_6_fu_283_p4);
    sensitive << ( header_methodID );
    sensitive << ( header_cb );

    SC_METHOD(thread_tmp_7_fu_300_p4);
    sensitive << ( header_methodID );
    sensitive << ( header_cb );

    SC_METHOD(thread_tmp_fu_240_p2);
    sensitive << ( dout_V_full_n );
    sensitive << ( header_objectID );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_predicate_op41_write_state3 );

    SC_METHOD(thread_tmp_s_fu_268_p3);
    sensitive << ( header_cb );

    SC_METHOD(thread_words32_5_fu_293_p2);
    sensitive << ( tmp_6_fu_283_p4 );

    SC_METHOD(thread_words32_6_fu_276_p2);
    sensitive << ( tmp_s_fu_268_p3 );

    SC_METHOD(thread_words32_7_fu_310_p2);
    sensitive << ( tmp_7_fu_300_p4 );

    SC_METHOD(thread_words32_8_fu_334_p2);
    sensitive << ( tmp_12_fu_326_p3 );

    SC_METHOD(thread_words32_address0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_5_fu_341_p2 );
    sensitive << ( tmp_10_fu_353_p1 );

    SC_METHOD(thread_words32_address1);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_words32_ce0);
    sensitive << ( din_V_empty_n );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_5_fu_341_p2 );

    SC_METHOD(thread_words32_ce1);
    sensitive << ( din_V_empty_n );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_5_fu_341_p2 );

    SC_METHOD(thread_words32_we0);
    sensitive << ( din_V_empty_n );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_5_fu_341_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( din_V_empty_n );
    sensitive << ( dout_V_full_n );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_5_fu_341_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_240_p2 );
    sensitive << ( tmp_1_fu_246_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( tmp_reg_375 );
    sensitive << ( tmp_1_reg_379 );
    sensitive << ( tmp_4_reg_383 );
    sensitive << ( tmp_14_nbreadreq_fu_123_p3 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_predicate_op41_write_state3 );
    sensitive << ( tmp_4_fu_252_p2 );
    sensitive << ( grp_forward_fu_197_ap_done );
    sensitive << ( grp_getRequestHead_fu_204_ap_done );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( bufferRESP_V_full_n );
    sensitive << ( bufferRESP_V_empty_n );
    sensitive << ( ap_predicate_op68_read_state8 );
    sensitive << ( pr_V_addr1_status );

    SC_THREAD(thread_ap_var_for_const0);

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0000000001";
    header_objectID = "00000000";
    header_methodID = "00000000";
    header_cb = "0000000000000000";
    header_size = "0000000000000000";
    p_status = "0000";
    ap_reg_grp_forward_fu_197_ap_start = SC_LOGIC_0;
    ap_reg_grp_getRequestHead_fu_204_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Block_proc11_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, din_V_dout, "(port)din_V_dout");
    sc_trace(mVcdFile, din_V_empty_n, "(port)din_V_empty_n");
    sc_trace(mVcdFile, din_V_read, "(port)din_V_read");
    sc_trace(mVcdFile, dout_V_din, "(port)dout_V_din");
    sc_trace(mVcdFile, dout_V_full_n, "(port)dout_V_full_n");
    sc_trace(mVcdFile, dout_V_write, "(port)dout_V_write");
    sc_trace(mVcdFile, prDone_V_dout, "(port)prDone_V_dout");
    sc_trace(mVcdFile, prDone_V_empty_n, "(port)prDone_V_empty_n");
    sc_trace(mVcdFile, prDone_V_read, "(port)prDone_V_read");
    sc_trace(mVcdFile, pr_V_addr_din, "(port)pr_V_addr_din");
    sc_trace(mVcdFile, pr_V_addr_full_n, "(port)pr_V_addr_full_n");
    sc_trace(mVcdFile, pr_V_addr_write, "(port)pr_V_addr_write");
    sc_trace(mVcdFile, pr_V_areaID_din, "(port)pr_V_areaID_din");
    sc_trace(mVcdFile, pr_V_areaID_full_n, "(port)pr_V_areaID_full_n");
    sc_trace(mVcdFile, pr_V_areaID_write, "(port)pr_V_areaID_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, header_objectID, "header_objectID");
    sc_trace(mVcdFile, header_methodID, "header_methodID");
    sc_trace(mVcdFile, header_cb, "header_cb");
    sc_trace(mVcdFile, header_size, "header_size");
    sc_trace(mVcdFile, p_status, "p_status");
    sc_trace(mVcdFile, din_V_blk_n, "din_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, tmp_5_fu_341_p2, "tmp_5_fu_341_p2");
    sc_trace(mVcdFile, dout_V_blk_n, "dout_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_fu_240_p2, "tmp_fu_240_p2");
    sc_trace(mVcdFile, tmp_1_fu_246_p2, "tmp_1_fu_246_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, tmp_reg_375, "tmp_reg_375");
    sc_trace(mVcdFile, tmp_1_reg_379, "tmp_1_reg_379");
    sc_trace(mVcdFile, tmp_4_reg_383, "tmp_4_reg_383");
    sc_trace(mVcdFile, tmp_14_nbreadreq_fu_123_p3, "tmp_14_nbreadreq_fu_123_p3");
    sc_trace(mVcdFile, pr_V_addr_blk_n, "pr_V_addr_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, pr_V_areaID_blk_n, "pr_V_areaID_blk_n");
    sc_trace(mVcdFile, reg_231, "reg_231");
    sc_trace(mVcdFile, ap_predicate_op41_write_state3, "ap_predicate_op41_write_state3");
    sc_trace(mVcdFile, ap_block_state3, "ap_block_state3");
    sc_trace(mVcdFile, tmp_4_fu_252_p2, "tmp_4_fu_252_p2");
    sc_trace(mVcdFile, it_fu_347_p2, "it_fu_347_p2");
    sc_trace(mVcdFile, ap_block_state9, "ap_block_state9");
    sc_trace(mVcdFile, words32_address0, "words32_address0");
    sc_trace(mVcdFile, words32_ce0, "words32_ce0");
    sc_trace(mVcdFile, words32_we0, "words32_we0");
    sc_trace(mVcdFile, words32_q0, "words32_q0");
    sc_trace(mVcdFile, words32_address1, "words32_address1");
    sc_trace(mVcdFile, words32_ce1, "words32_ce1");
    sc_trace(mVcdFile, words32_q1, "words32_q1");
    sc_trace(mVcdFile, grp_forward_fu_197_ap_start, "grp_forward_fu_197_ap_start");
    sc_trace(mVcdFile, grp_forward_fu_197_ap_done, "grp_forward_fu_197_ap_done");
    sc_trace(mVcdFile, grp_forward_fu_197_ap_idle, "grp_forward_fu_197_ap_idle");
    sc_trace(mVcdFile, grp_forward_fu_197_ap_ready, "grp_forward_fu_197_ap_ready");
    sc_trace(mVcdFile, grp_forward_fu_197_src_V_read, "grp_forward_fu_197_src_V_read");
    sc_trace(mVcdFile, grp_getRequestHead_fu_204_ap_start, "grp_getRequestHead_fu_204_ap_start");
    sc_trace(mVcdFile, grp_getRequestHead_fu_204_ap_done, "grp_getRequestHead_fu_204_ap_done");
    sc_trace(mVcdFile, grp_getRequestHead_fu_204_ap_idle, "grp_getRequestHead_fu_204_ap_idle");
    sc_trace(mVcdFile, grp_getRequestHead_fu_204_ap_ready, "grp_getRequestHead_fu_204_ap_ready");
    sc_trace(mVcdFile, grp_getRequestHead_fu_204_src_V_read, "grp_getRequestHead_fu_204_src_V_read");
    sc_trace(mVcdFile, grp_getRequestHead_fu_204_header_objectID, "grp_getRequestHead_fu_204_header_objectID");
    sc_trace(mVcdFile, grp_getRequestHead_fu_204_header_objectID_ap_vld, "grp_getRequestHead_fu_204_header_objectID_ap_vld");
    sc_trace(mVcdFile, grp_getRequestHead_fu_204_header_methodID, "grp_getRequestHead_fu_204_header_methodID");
    sc_trace(mVcdFile, grp_getRequestHead_fu_204_header_methodID_ap_vld, "grp_getRequestHead_fu_204_header_methodID_ap_vld");
    sc_trace(mVcdFile, grp_getRequestHead_fu_204_header_cb, "grp_getRequestHead_fu_204_header_cb");
    sc_trace(mVcdFile, grp_getRequestHead_fu_204_header_cb_ap_vld, "grp_getRequestHead_fu_204_header_cb_ap_vld");
    sc_trace(mVcdFile, grp_getRequestHead_fu_204_header_size, "grp_getRequestHead_fu_204_header_size");
    sc_trace(mVcdFile, grp_getRequestHead_fu_204_header_size_ap_vld, "grp_getRequestHead_fu_204_header_size_ap_vld");
    sc_trace(mVcdFile, it_0_i_i_reg_186, "it_0_i_i_reg_186");
    sc_trace(mVcdFile, ap_reg_grp_forward_fu_197_ap_start, "ap_reg_grp_forward_fu_197_ap_start");
    sc_trace(mVcdFile, ap_block_state3_ignore_call1, "ap_block_state3_ignore_call1");
    sc_trace(mVcdFile, ap_reg_grp_getRequestHead_fu_204_ap_start, "ap_reg_grp_getRequestHead_fu_204_ap_start");
    sc_trace(mVcdFile, ap_block_state1_ignore_call7, "ap_block_state1_ignore_call7");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_10_fu_353_p1, "tmp_10_fu_353_p1");
    sc_trace(mVcdFile, bufferRESP_V_din, "bufferRESP_V_din");
    sc_trace(mVcdFile, bufferRESP_V_full_n, "bufferRESP_V_full_n");
    sc_trace(mVcdFile, bufferRESP_V_write, "bufferRESP_V_write");
    sc_trace(mVcdFile, ap_block_state6, "ap_block_state6");
    sc_trace(mVcdFile, bufferRESP_V_dout, "bufferRESP_V_dout");
    sc_trace(mVcdFile, bufferRESP_V_empty_n, "bufferRESP_V_empty_n");
    sc_trace(mVcdFile, bufferRESP_V_read, "bufferRESP_V_read");
    sc_trace(mVcdFile, ap_predicate_op68_read_state8, "ap_predicate_op68_read_state8");
    sc_trace(mVcdFile, ap_block_state8, "ap_block_state8");
    sc_trace(mVcdFile, words32_6_fu_276_p2, "words32_6_fu_276_p2");
    sc_trace(mVcdFile, words32_5_fu_293_p2, "words32_5_fu_293_p2");
    sc_trace(mVcdFile, words32_7_fu_310_p2, "words32_7_fu_310_p2");
    sc_trace(mVcdFile, words32_8_fu_334_p2, "words32_8_fu_334_p2");
    sc_trace(mVcdFile, pr_V_addr1_update, "pr_V_addr1_update");
    sc_trace(mVcdFile, pr_V_addr1_status, "pr_V_addr1_status");
    sc_trace(mVcdFile, tmp_16_fu_258_p1, "tmp_16_fu_258_p1");
    sc_trace(mVcdFile, tmp_s_fu_268_p3, "tmp_s_fu_268_p3");
    sc_trace(mVcdFile, tmp_6_fu_283_p4, "tmp_6_fu_283_p4");
    sc_trace(mVcdFile, tmp_7_fu_300_p4, "tmp_7_fu_300_p4");
    sc_trace(mVcdFile, tmp_12_fu_326_p3, "tmp_12_fu_326_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
#endif

    }
}

Block_proc11::~Block_proc11() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete words32_U;
    delete grp_forward_fu_197;
    delete grp_getRequestHead_fu_204;
    delete bufferRESP_V_fifo_U;
}

void Block_proc11::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void Block_proc11::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                    !((esl_seteq<1,1,1>(ap_const_logic_0, bufferRESP_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_read_state8.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_read_state8.read()))) && 
                    (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_375.read()) || 
                     esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_reg_379.read()) || 
                     esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_reg_383.read()) || 
                     esl_seteq<1,1,1>(ap_const_lv1_0, tmp_14_nbreadreq_fu_123_p3.read())))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_forward_fu_197_ap_start = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
              !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op41_write_state3.read())) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_240_p2.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
              esl_seteq<1,1,1>(tmp_fu_240_p2.read(), ap_const_lv1_1) && 
              !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op41_write_state3.read())) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_246_p2.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_fu_252_p2.read())))) {
            ap_reg_grp_forward_fu_197_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_forward_fu_197_ap_ready.read())) {
            ap_reg_grp_forward_fu_197_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_getRequestHead_fu_204_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_reg_grp_getRequestHead_fu_204_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_getRequestHead_fu_204_ap_ready.read())) {
            ap_reg_grp_getRequestHead_fu_204_ap_start = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(tmp_5_fu_341_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(tmp_5_fu_341_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, din_V_empty_n.read())))) {
        it_0_i_i_reg_186 = it_fu_347_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(tmp_fu_240_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_fu_246_p2.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op41_write_state3.read())))) {
        it_0_i_i_reg_186 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         !(esl_seteq<1,1,1>(tmp_5_fu_341_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, din_V_empty_n.read())) && 
         esl_seteq<1,1,1>(tmp_5_fu_341_p2.read(), ap_const_lv1_1))) {
        p_status = ap_const_lv4_2;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(tmp_fu_240_p2.read(), ap_const_lv1_1) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op41_write_state3.read())) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_246_p2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_4_fu_252_p2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_16_fu_258_p1.read()))) {
        p_status = ap_const_lv4_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_logic_1, grp_getRequestHead_fu_204_header_cb_ap_vld.read()))) {
        header_cb = grp_getRequestHead_fu_204_header_cb.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_logic_1, grp_getRequestHead_fu_204_header_methodID_ap_vld.read()))) {
        header_methodID = grp_getRequestHead_fu_204_header_methodID.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_logic_1, grp_getRequestHead_fu_204_header_objectID_ap_vld.read()))) {
        header_objectID = grp_getRequestHead_fu_204_header_objectID.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_logic_1, grp_getRequestHead_fu_204_header_size_ap_vld.read()))) {
        header_size = grp_getRequestHead_fu_204_header_size.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
  !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op41_write_state3.read())) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_240_p2.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
  esl_seteq<1,1,1>(tmp_fu_240_p2.read(), ap_const_lv1_1) && 
  !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op41_write_state3.read())) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_246_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_fu_252_p2.read())))) {
        reg_231 = header_size.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_fu_240_p2.read(), ap_const_lv1_1) && !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op41_write_state3.read())))) {
        tmp_1_reg_379 = tmp_1_fu_246_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_fu_240_p2.read(), ap_const_lv1_1) && !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op41_write_state3.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_246_p2.read()))) {
        tmp_4_reg_383 = tmp_4_fu_252_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op41_write_state3.read())))) {
        tmp_reg_375 = tmp_fu_240_p2.read();
    }
}

void Block_proc11::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Block_proc11::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void Block_proc11::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Block_proc11::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Block_proc11::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Block_proc11::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Block_proc11::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void Block_proc11::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void Block_proc11::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void Block_proc11::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void Block_proc11::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Block_proc11::thread_ap_block_state1_ignore_call7() {
    ap_block_state1_ignore_call7 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Block_proc11::thread_ap_block_state3() {
    ap_block_state3 = (esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op41_write_state3.read()));
}

void Block_proc11::thread_ap_block_state3_ignore_call1() {
    ap_block_state3_ignore_call1 = (esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op41_write_state3.read()));
}

void Block_proc11::thread_ap_block_state6() {
    ap_block_state6 = (esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, bufferRESP_V_full_n.read()));
}

void Block_proc11::thread_ap_block_state8() {
    ap_block_state8 = ((esl_seteq<1,1,1>(ap_const_logic_0, bufferRESP_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_read_state8.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_read_state8.read())));
}

void Block_proc11::thread_ap_block_state9() {
    ap_block_state9 = (esl_seteq<1,1,1>(tmp_5_fu_341_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, din_V_empty_n.read()));
}

void Block_proc11::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_0, bufferRESP_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_read_state8.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_read_state8.read()))) && 
         (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_375.read()) || 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_reg_379.read()) || 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_reg_383.read()) || 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_14_nbreadreq_fu_123_p3.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Block_proc11::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Block_proc11::thread_ap_predicate_op41_write_state3() {
    ap_predicate_op41_write_state3 = (esl_seteq<1,1,1>(tmp_fu_240_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_fu_246_p2.read()));
}

void Block_proc11::thread_ap_predicate_op68_read_state8() {
    ap_predicate_op68_read_state8 = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_375.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_379.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_4_reg_383.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_14_nbreadreq_fu_123_p3.read()));
}

void Block_proc11::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_0, bufferRESP_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_read_state8.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_read_state8.read()))) && 
         (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_375.read()) || 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_reg_379.read()) || 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_reg_383.read()) || 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_14_nbreadreq_fu_123_p3.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Block_proc11::thread_bufferRESP_V_din() {
    bufferRESP_V_din = esl_zext<32,4>(p_status.read());
}

void Block_proc11::thread_bufferRESP_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_read_state8.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_0, bufferRESP_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_read_state8.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_read_state8.read()))))) {
        bufferRESP_V_read = ap_const_logic_1;
    } else {
        bufferRESP_V_read = ap_const_logic_0;
    }
}

void Block_proc11::thread_bufferRESP_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, bufferRESP_V_full_n.read())))) {
        bufferRESP_V_write = ap_const_logic_1;
    } else {
        bufferRESP_V_write = ap_const_logic_0;
    }
}

void Block_proc11::thread_din_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(tmp_5_fu_341_p2.read(), ap_const_lv1_0))) {
        din_V_blk_n = din_V_empty_n.read();
    } else {
        din_V_blk_n = ap_const_logic_1;
    }
}

void Block_proc11::thread_din_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(tmp_5_fu_341_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(tmp_5_fu_341_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, din_V_empty_n.read())))) {
        din_V_read = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        din_V_read = grp_getRequestHead_fu_204_src_V_read.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        din_V_read = grp_forward_fu_197_src_V_read.read();
    } else {
        din_V_read = ap_const_logic_0;
    }
}

void Block_proc11::thread_dout_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(tmp_fu_240_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_fu_246_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_375.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_379.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_4_reg_383.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_14_nbreadreq_fu_123_p3.read())))) {
        dout_V_blk_n = dout_V_full_n.read();
    } else {
        dout_V_blk_n = ap_const_logic_1;
    }
}

void Block_proc11::thread_dout_V_din() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_read_state8.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_0, bufferRESP_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_read_state8.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_read_state8.read()))))) {
        dout_V_din = bufferRESP_V_dout.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(dout_V_full_n.read(), ap_const_logic_1))) {
        dout_V_din = ap_const_lv32_20001;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, bufferRESP_V_full_n.read())))) {
        dout_V_din = words32_8_fu_334_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_forward_fu_197_ap_done.read())))) {
        dout_V_din = words32_7_fu_310_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_forward_fu_197_ap_done.read())))) {
        dout_V_din = words32_5_fu_293_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op41_write_state3.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op41_write_state3.read())))) {
        dout_V_din = words32_6_fu_276_p2.read();
    } else {
        dout_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void Block_proc11::thread_dout_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op41_write_state3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op41_write_state3.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_forward_fu_197_ap_done.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_forward_fu_197_ap_done.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, bufferRESP_V_full_n.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(dout_V_full_n.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_read_state8.read()) && 
          !((esl_seteq<1,1,1>(ap_const_logic_0, bufferRESP_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_read_state8.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_read_state8.read())))))) {
        dout_V_write = ap_const_logic_1;
    } else {
        dout_V_write = ap_const_logic_0;
    }
}

void Block_proc11::thread_grp_forward_fu_197_ap_start() {
    grp_forward_fu_197_ap_start = ap_reg_grp_forward_fu_197_ap_start.read();
}

void Block_proc11::thread_grp_getRequestHead_fu_204_ap_start() {
    grp_getRequestHead_fu_204_ap_start = ap_reg_grp_getRequestHead_fu_204_ap_start.read();
}

void Block_proc11::thread_it_fu_347_p2() {
    it_fu_347_p2 = (!it_0_i_i_reg_186.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(it_0_i_i_reg_186.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void Block_proc11::thread_prDone_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_fu_240_p2.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op41_write_state3.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_246_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_4_fu_252_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, prDone_V_empty_n.read()))) {
        prDone_V_read = ap_const_logic_1;
    } else {
        prDone_V_read = ap_const_logic_0;
    }
}

void Block_proc11::thread_pr_V_addr1_status() {
    pr_V_addr1_status = (pr_V_addr_full_n.read() & pr_V_areaID_full_n.read());
}

void Block_proc11::thread_pr_V_addr1_update() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,1,1>(pr_V_addr1_status.read(), ap_const_logic_1))) {
        pr_V_addr1_update = ap_const_logic_1;
    } else {
        pr_V_addr1_update = ap_const_logic_0;
    }
}

void Block_proc11::thread_pr_V_addr_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        pr_V_addr_blk_n = pr_V_addr_full_n.read();
    } else {
        pr_V_addr_blk_n = ap_const_logic_1;
    }
}

void Block_proc11::thread_pr_V_addr_din() {
    pr_V_addr_din = words32_q0.read();
}

void Block_proc11::thread_pr_V_addr_write() {
    pr_V_addr_write = pr_V_addr1_update.read();
}

void Block_proc11::thread_pr_V_areaID_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        pr_V_areaID_blk_n = pr_V_areaID_full_n.read();
    } else {
        pr_V_areaID_blk_n = ap_const_logic_1;
    }
}

void Block_proc11::thread_pr_V_areaID_din() {
    pr_V_areaID_din = words32_q1.read().range(31, 16);
}

void Block_proc11::thread_pr_V_areaID_write() {
    pr_V_areaID_write = pr_V_addr1_update.read();
}

void Block_proc11::thread_tmp_10_fu_353_p1() {
    tmp_10_fu_353_p1 = esl_zext<64,2>(it_0_i_i_reg_186.read());
}

void Block_proc11::thread_tmp_12_fu_326_p3() {
    tmp_12_fu_326_p3 = esl_concat<16,16>(header_cb.read(), ap_const_lv16_0);
}

void Block_proc11::thread_tmp_14_nbreadreq_fu_123_p3() {
    tmp_14_nbreadreq_fu_123_p3 =  (sc_lv<1>) (bufferRESP_V_empty_n.read());
}

void Block_proc11::thread_tmp_16_fu_258_p1() {
    tmp_16_fu_258_p1 =  (sc_lv<1>) (prDone_V_dout.read());
}

void Block_proc11::thread_tmp_1_fu_246_p2() {
    tmp_1_fu_246_p2 = (!header_methodID.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<1>(): sc_lv<1>(header_methodID.read() == ap_const_lv8_1);
}

void Block_proc11::thread_tmp_4_fu_252_p2() {
    tmp_4_fu_252_p2 = (!header_methodID.read().is_01() || !ap_const_lv8_2.is_01())? sc_lv<1>(): sc_lv<1>(header_methodID.read() == ap_const_lv8_2);
}

void Block_proc11::thread_tmp_5_fu_341_p2() {
    tmp_5_fu_341_p2 = (!it_0_i_i_reg_186.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(it_0_i_i_reg_186.read() == ap_const_lv2_2);
}

void Block_proc11::thread_tmp_6_fu_283_p4() {
    tmp_6_fu_283_p4 = esl_concat<24,8>(esl_concat<16,8>(header_cb.read(), header_methodID.read()), ap_const_lv8_0);
}

void Block_proc11::thread_tmp_7_fu_300_p4() {
    tmp_7_fu_300_p4 = esl_concat<24,8>(esl_concat<16,8>(header_cb.read(), header_methodID.read()), ap_const_lv8_0);
}

void Block_proc11::thread_tmp_fu_240_p2() {
    tmp_fu_240_p2 = (!header_objectID.read().is_01() || !ap_const_lv8_2.is_01())? sc_lv<1>(): sc_lv<1>(header_objectID.read() == ap_const_lv8_2);
}

void Block_proc11::thread_tmp_s_fu_268_p3() {
    tmp_s_fu_268_p3 = esl_concat<16,16>(header_cb.read(), ap_const_lv16_0);
}

void Block_proc11::thread_words32_5_fu_293_p2() {
    words32_5_fu_293_p2 = (tmp_6_fu_283_p4.read() | ap_const_lv32_3);
}

void Block_proc11::thread_words32_6_fu_276_p2() {
    words32_6_fu_276_p2 = (tmp_s_fu_268_p3.read() | ap_const_lv32_101);
}

void Block_proc11::thread_words32_7_fu_310_p2() {
    words32_7_fu_310_p2 = (tmp_7_fu_300_p4.read() | ap_const_lv32_3);
}

void Block_proc11::thread_words32_8_fu_334_p2() {
    words32_8_fu_334_p2 = (tmp_12_fu_326_p3.read() | ap_const_lv32_205);
}

void Block_proc11::thread_words32_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        if (esl_seteq<1,1,1>(tmp_5_fu_341_p2.read(), ap_const_lv1_1)) {
            words32_address0 =  (sc_lv<1>) (ap_const_lv64_0);
        } else if (esl_seteq<1,1,1>(tmp_5_fu_341_p2.read(), ap_const_lv1_0)) {
            words32_address0 =  (sc_lv<1>) (tmp_10_fu_353_p1.read());
        } else {
            words32_address0 =  (sc_lv<1>) ("X");
        }
    } else {
        words32_address0 =  (sc_lv<1>) ("X");
    }
}

void Block_proc11::thread_words32_address1() {
    words32_address1 =  (sc_lv<1>) (ap_const_lv64_1);
}

void Block_proc11::thread_words32_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          !(esl_seteq<1,1,1>(tmp_5_fu_341_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, din_V_empty_n.read())) && 
          esl_seteq<1,1,1>(tmp_5_fu_341_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(tmp_5_fu_341_p2.read(), ap_const_lv1_0) && 
          !(esl_seteq<1,1,1>(tmp_5_fu_341_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, din_V_empty_n.read()))))) {
        words32_ce0 = ap_const_logic_1;
    } else {
        words32_ce0 = ap_const_logic_0;
    }
}

void Block_proc11::thread_words32_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         !(esl_seteq<1,1,1>(tmp_5_fu_341_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, din_V_empty_n.read())))) {
        words32_ce1 = ap_const_logic_1;
    } else {
        words32_ce1 = ap_const_logic_0;
    }
}

void Block_proc11::thread_words32_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(tmp_5_fu_341_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(tmp_5_fu_341_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, din_V_empty_n.read())))) {
        words32_we0 = ap_const_logic_1;
    } else {
        words32_we0 = ap_const_logic_0;
    }
}

void Block_proc11::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_getRequestHead_fu_204_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_fu_240_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_fu_246_p2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op41_write_state3.read())))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_fu_240_p2.read(), ap_const_lv1_1) && !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op41_write_state3.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_246_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_4_fu_252_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_fu_240_p2.read(), ap_const_lv1_1) && !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op41_write_state3.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_246_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_fu_252_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op41_write_state3.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_240_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_forward_fu_197_ap_done.read())))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_forward_fu_197_ap_done.read())))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, bufferRESP_V_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(dout_V_full_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && !((esl_seteq<1,1,1>(ap_const_logic_0, bufferRESP_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_read_state8.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_read_state8.read()))) && (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_375.read()) || 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_reg_379.read()) || 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_reg_383.read()) || 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_14_nbreadreq_fu_123_p3.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_375.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_379.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_4_reg_383.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_14_nbreadreq_fu_123_p3.read()) && !((esl_seteq<1,1,1>(ap_const_logic_0, bufferRESP_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_read_state8.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, dout_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op68_read_state8.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(tmp_5_fu_341_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(tmp_5_fu_341_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, din_V_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && !(esl_seteq<1,1,1>(tmp_5_fu_341_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, din_V_empty_n.read())) && esl_seteq<1,1,1>(tmp_5_fu_341_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(pr_V_addr1_status.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<10>) ("XXXXXXXXXX");
            break;
    }
}

}

