// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _wrapperAdmin_HH_
#define _wrapperAdmin_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Block_proc11.h"

namespace ap_rtl {

struct wrapperAdmin : public sc_module {
    // Port declarations 17
    sc_in< sc_lv<32> > din_V_dout;
    sc_in< sc_logic > din_V_empty_n;
    sc_out< sc_logic > din_V_read;
    sc_out< sc_lv<32> > dout_V_din;
    sc_in< sc_logic > dout_V_full_n;
    sc_out< sc_logic > dout_V_write;
    sc_out< sc_lv<32> > pr_V_addr_din;
    sc_in< sc_logic > pr_V_addr_full_n;
    sc_out< sc_logic > pr_V_addr_write;
    sc_out< sc_lv<16> > pr_V_areaID_din;
    sc_in< sc_logic > pr_V_areaID_full_n;
    sc_out< sc_logic > pr_V_areaID_write;
    sc_in< sc_logic > prDone_V_dout;
    sc_in< sc_logic > prDone_V_empty_n;
    sc_out< sc_logic > prDone_V_read;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;


    // Module declarations
    wrapperAdmin(sc_module_name name);
    SC_HAS_PROCESS(wrapperAdmin);

    ~wrapperAdmin();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    Block_proc11* Block_proc11_U0;
    sc_signal< sc_logic > Block_proc11_U0_ap_start;
    sc_signal< sc_logic > Block_proc11_U0_ap_done;
    sc_signal< sc_logic > Block_proc11_U0_ap_continue;
    sc_signal< sc_logic > Block_proc11_U0_ap_idle;
    sc_signal< sc_logic > Block_proc11_U0_ap_ready;
    sc_signal< sc_logic > Block_proc11_U0_din_V_read;
    sc_signal< sc_lv<32> > Block_proc11_U0_dout_V_din;
    sc_signal< sc_logic > Block_proc11_U0_dout_V_write;
    sc_signal< sc_logic > Block_proc11_U0_prDone_V_read;
    sc_signal< sc_lv<32> > Block_proc11_U0_pr_V_addr_din;
    sc_signal< sc_logic > Block_proc11_U0_pr_V_addr_write;
    sc_signal< sc_lv<16> > Block_proc11_U0_pr_V_areaID_din;
    sc_signal< sc_logic > Block_proc11_U0_pr_V_areaID_write;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > Block_proc11_U0_start_full_n;
    sc_signal< sc_logic > Block_proc11_U0_start_write;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_logic ap_const_logic_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_Block_proc11_U0_ap_continue();
    void thread_Block_proc11_U0_start_full_n();
    void thread_Block_proc11_U0_start_write();
    void thread_ap_sync_continue();
    void thread_din_V_read();
    void thread_dout_V_din();
    void thread_dout_V_write();
    void thread_prDone_V_read();
    void thread_pr_V_addr_din();
    void thread_pr_V_addr_write();
    void thread_pr_V_areaID_din();
    void thread_pr_V_areaID_write();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
