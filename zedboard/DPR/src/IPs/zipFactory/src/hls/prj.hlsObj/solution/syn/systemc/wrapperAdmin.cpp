// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "wrapperAdmin.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic wrapperAdmin::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<32> wrapperAdmin::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<16> wrapperAdmin::ap_const_lv16_0 = "0000000000000000";
const sc_logic wrapperAdmin::ap_const_logic_1 = sc_dt::Log_1;

wrapperAdmin::wrapperAdmin(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Block_proc11_U0 = new Block_proc11("Block_proc11_U0");
    Block_proc11_U0->ap_clk(ap_clk);
    Block_proc11_U0->ap_rst(ap_rst);
    Block_proc11_U0->ap_start(Block_proc11_U0_ap_start);
    Block_proc11_U0->ap_done(Block_proc11_U0_ap_done);
    Block_proc11_U0->ap_continue(Block_proc11_U0_ap_continue);
    Block_proc11_U0->ap_idle(Block_proc11_U0_ap_idle);
    Block_proc11_U0->ap_ready(Block_proc11_U0_ap_ready);
    Block_proc11_U0->din_V_dout(din_V_dout);
    Block_proc11_U0->din_V_empty_n(din_V_empty_n);
    Block_proc11_U0->din_V_read(Block_proc11_U0_din_V_read);
    Block_proc11_U0->dout_V_din(Block_proc11_U0_dout_V_din);
    Block_proc11_U0->dout_V_full_n(dout_V_full_n);
    Block_proc11_U0->dout_V_write(Block_proc11_U0_dout_V_write);
    Block_proc11_U0->prDone_V_dout(prDone_V_dout);
    Block_proc11_U0->prDone_V_empty_n(prDone_V_empty_n);
    Block_proc11_U0->prDone_V_read(Block_proc11_U0_prDone_V_read);
    Block_proc11_U0->pr_V_addr_din(Block_proc11_U0_pr_V_addr_din);
    Block_proc11_U0->pr_V_addr_full_n(pr_V_addr_full_n);
    Block_proc11_U0->pr_V_addr_write(Block_proc11_U0_pr_V_addr_write);
    Block_proc11_U0->pr_V_areaID_din(Block_proc11_U0_pr_V_areaID_din);
    Block_proc11_U0->pr_V_areaID_full_n(pr_V_areaID_full_n);
    Block_proc11_U0->pr_V_areaID_write(Block_proc11_U0_pr_V_areaID_write);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Block_proc11_U0_ap_continue);

    SC_METHOD(thread_Block_proc11_U0_start_full_n);

    SC_METHOD(thread_Block_proc11_U0_start_write);

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_din_V_read);
    sensitive << ( Block_proc11_U0_din_V_read );

    SC_METHOD(thread_dout_V_din);
    sensitive << ( Block_proc11_U0_dout_V_din );

    SC_METHOD(thread_dout_V_write);
    sensitive << ( Block_proc11_U0_dout_V_write );

    SC_METHOD(thread_prDone_V_read);
    sensitive << ( Block_proc11_U0_prDone_V_read );

    SC_METHOD(thread_pr_V_addr_din);
    sensitive << ( Block_proc11_U0_pr_V_addr_din );

    SC_METHOD(thread_pr_V_addr_write);
    sensitive << ( Block_proc11_U0_pr_V_addr_write );

    SC_METHOD(thread_pr_V_areaID_din);
    sensitive << ( Block_proc11_U0_pr_V_areaID_din );

    SC_METHOD(thread_pr_V_areaID_write);
    sensitive << ( Block_proc11_U0_pr_V_areaID_write );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    Block_proc11_U0_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "wrapperAdmin_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, din_V_dout, "(port)din_V_dout");
    sc_trace(mVcdFile, din_V_empty_n, "(port)din_V_empty_n");
    sc_trace(mVcdFile, din_V_read, "(port)din_V_read");
    sc_trace(mVcdFile, dout_V_din, "(port)dout_V_din");
    sc_trace(mVcdFile, dout_V_full_n, "(port)dout_V_full_n");
    sc_trace(mVcdFile, dout_V_write, "(port)dout_V_write");
    sc_trace(mVcdFile, pr_V_addr_din, "(port)pr_V_addr_din");
    sc_trace(mVcdFile, pr_V_addr_full_n, "(port)pr_V_addr_full_n");
    sc_trace(mVcdFile, pr_V_addr_write, "(port)pr_V_addr_write");
    sc_trace(mVcdFile, pr_V_areaID_din, "(port)pr_V_areaID_din");
    sc_trace(mVcdFile, pr_V_areaID_full_n, "(port)pr_V_areaID_full_n");
    sc_trace(mVcdFile, pr_V_areaID_write, "(port)pr_V_areaID_write");
    sc_trace(mVcdFile, prDone_V_dout, "(port)prDone_V_dout");
    sc_trace(mVcdFile, prDone_V_empty_n, "(port)prDone_V_empty_n");
    sc_trace(mVcdFile, prDone_V_read, "(port)prDone_V_read");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, Block_proc11_U0_ap_start, "Block_proc11_U0_ap_start");
    sc_trace(mVcdFile, Block_proc11_U0_ap_done, "Block_proc11_U0_ap_done");
    sc_trace(mVcdFile, Block_proc11_U0_ap_continue, "Block_proc11_U0_ap_continue");
    sc_trace(mVcdFile, Block_proc11_U0_ap_idle, "Block_proc11_U0_ap_idle");
    sc_trace(mVcdFile, Block_proc11_U0_ap_ready, "Block_proc11_U0_ap_ready");
    sc_trace(mVcdFile, Block_proc11_U0_din_V_read, "Block_proc11_U0_din_V_read");
    sc_trace(mVcdFile, Block_proc11_U0_dout_V_din, "Block_proc11_U0_dout_V_din");
    sc_trace(mVcdFile, Block_proc11_U0_dout_V_write, "Block_proc11_U0_dout_V_write");
    sc_trace(mVcdFile, Block_proc11_U0_prDone_V_read, "Block_proc11_U0_prDone_V_read");
    sc_trace(mVcdFile, Block_proc11_U0_pr_V_addr_din, "Block_proc11_U0_pr_V_addr_din");
    sc_trace(mVcdFile, Block_proc11_U0_pr_V_addr_write, "Block_proc11_U0_pr_V_addr_write");
    sc_trace(mVcdFile, Block_proc11_U0_pr_V_areaID_din, "Block_proc11_U0_pr_V_areaID_din");
    sc_trace(mVcdFile, Block_proc11_U0_pr_V_areaID_write, "Block_proc11_U0_pr_V_areaID_write");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, Block_proc11_U0_start_full_n, "Block_proc11_U0_start_full_n");
    sc_trace(mVcdFile, Block_proc11_U0_start_write, "Block_proc11_U0_start_write");
#endif

    }
    mHdltvinHandle.open("wrapperAdmin.hdltvin.dat");
    mHdltvoutHandle.open("wrapperAdmin.hdltvout.dat");
}

wrapperAdmin::~wrapperAdmin() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete Block_proc11_U0;
}

void wrapperAdmin::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        Block_proc11_U0_ap_start = ap_const_logic_0;
    } else {
        Block_proc11_U0_ap_start = ap_const_logic_1;
    }
}

void wrapperAdmin::thread_Block_proc11_U0_ap_continue() {
    Block_proc11_U0_ap_continue = ap_const_logic_1;
}

void wrapperAdmin::thread_Block_proc11_U0_start_full_n() {
    Block_proc11_U0_start_full_n = ap_const_logic_1;
}

void wrapperAdmin::thread_Block_proc11_U0_start_write() {
    Block_proc11_U0_start_write = ap_const_logic_0;
}

void wrapperAdmin::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_0;
}

void wrapperAdmin::thread_din_V_read() {
    din_V_read = Block_proc11_U0_din_V_read.read();
}

void wrapperAdmin::thread_dout_V_din() {
    dout_V_din = Block_proc11_U0_dout_V_din.read();
}

void wrapperAdmin::thread_dout_V_write() {
    dout_V_write = Block_proc11_U0_dout_V_write.read();
}

void wrapperAdmin::thread_prDone_V_read() {
    prDone_V_read = Block_proc11_U0_prDone_V_read.read();
}

void wrapperAdmin::thread_pr_V_addr_din() {
    pr_V_addr_din = Block_proc11_U0_pr_V_addr_din.read();
}

void wrapperAdmin::thread_pr_V_addr_write() {
    pr_V_addr_write = Block_proc11_U0_pr_V_addr_write.read();
}

void wrapperAdmin::thread_pr_V_areaID_din() {
    pr_V_areaID_din = Block_proc11_U0_pr_V_areaID_din.read();
}

void wrapperAdmin::thread_pr_V_areaID_write() {
    pr_V_areaID_write = Block_proc11_U0_pr_V_areaID_write.read();
}

void wrapperAdmin::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"din_V_dout\" :  \"" << din_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"din_V_empty_n\" :  \"" << din_V_empty_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"din_V_read\" :  \"" << din_V_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dout_V_din\" :  \"" << dout_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dout_V_full_n\" :  \"" << dout_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dout_V_write\" :  \"" << dout_V_write.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pr_V_addr_din\" :  \"" << pr_V_addr_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"pr_V_addr_full_n\" :  \"" << pr_V_addr_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pr_V_addr_write\" :  \"" << pr_V_addr_write.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pr_V_areaID_din\" :  \"" << pr_V_areaID_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"pr_V_areaID_full_n\" :  \"" << pr_V_areaID_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pr_V_areaID_write\" :  \"" << pr_V_areaID_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"prDone_V_dout\" :  \"" << prDone_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"prDone_V_empty_n\" :  \"" << prDone_V_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"prDone_V_read\" :  \"" << prDone_V_read.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

