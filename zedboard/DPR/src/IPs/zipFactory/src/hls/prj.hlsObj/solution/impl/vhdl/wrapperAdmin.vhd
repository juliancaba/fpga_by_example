-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity wrapperAdmin is
port (
    din_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    din_V_empty_n : IN STD_LOGIC;
    din_V_read : OUT STD_LOGIC;
    dout_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    dout_V_full_n : IN STD_LOGIC;
    dout_V_write : OUT STD_LOGIC;
    pr_V_addr_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    pr_V_addr_full_n : IN STD_LOGIC;
    pr_V_addr_write : OUT STD_LOGIC;
    pr_V_areaID_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    pr_V_areaID_full_n : IN STD_LOGIC;
    pr_V_areaID_write : OUT STD_LOGIC;
    prDone_V_dout : IN STD_LOGIC;
    prDone_V_empty_n : IN STD_LOGIC;
    prDone_V_read : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC );
end;


architecture behav of wrapperAdmin is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "wrapperAdmin,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.437000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=243,HLS_SYN_LUT=668}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal Block_proc11_U0_ap_start : STD_LOGIC := '0';
    signal Block_proc11_U0_ap_done : STD_LOGIC;
    signal Block_proc11_U0_ap_continue : STD_LOGIC;
    signal Block_proc11_U0_ap_idle : STD_LOGIC;
    signal Block_proc11_U0_ap_ready : STD_LOGIC;
    signal Block_proc11_U0_din_V_read : STD_LOGIC;
    signal Block_proc11_U0_dout_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc11_U0_dout_V_write : STD_LOGIC;
    signal Block_proc11_U0_prDone_V_read : STD_LOGIC;
    signal Block_proc11_U0_pr_V_addr_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc11_U0_pr_V_addr_write : STD_LOGIC;
    signal Block_proc11_U0_pr_V_areaID_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_proc11_U0_pr_V_areaID_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal Block_proc11_U0_start_full_n : STD_LOGIC;
    signal Block_proc11_U0_start_write : STD_LOGIC;

    component Block_proc11 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        din_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        din_V_empty_n : IN STD_LOGIC;
        din_V_read : OUT STD_LOGIC;
        dout_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        dout_V_full_n : IN STD_LOGIC;
        dout_V_write : OUT STD_LOGIC;
        prDone_V_dout : IN STD_LOGIC;
        prDone_V_empty_n : IN STD_LOGIC;
        prDone_V_read : OUT STD_LOGIC;
        pr_V_addr_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        pr_V_addr_full_n : IN STD_LOGIC;
        pr_V_addr_write : OUT STD_LOGIC;
        pr_V_areaID_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        pr_V_areaID_full_n : IN STD_LOGIC;
        pr_V_areaID_write : OUT STD_LOGIC );
    end component;



begin
    Block_proc11_U0 : component Block_proc11
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_proc11_U0_ap_start,
        ap_done => Block_proc11_U0_ap_done,
        ap_continue => Block_proc11_U0_ap_continue,
        ap_idle => Block_proc11_U0_ap_idle,
        ap_ready => Block_proc11_U0_ap_ready,
        din_V_dout => din_V_dout,
        din_V_empty_n => din_V_empty_n,
        din_V_read => Block_proc11_U0_din_V_read,
        dout_V_din => Block_proc11_U0_dout_V_din,
        dout_V_full_n => dout_V_full_n,
        dout_V_write => Block_proc11_U0_dout_V_write,
        prDone_V_dout => prDone_V_dout,
        prDone_V_empty_n => prDone_V_empty_n,
        prDone_V_read => Block_proc11_U0_prDone_V_read,
        pr_V_addr_din => Block_proc11_U0_pr_V_addr_din,
        pr_V_addr_full_n => pr_V_addr_full_n,
        pr_V_addr_write => Block_proc11_U0_pr_V_addr_write,
        pr_V_areaID_din => Block_proc11_U0_pr_V_areaID_din,
        pr_V_areaID_full_n => pr_V_areaID_full_n,
        pr_V_areaID_write => Block_proc11_U0_pr_V_areaID_write);





    Block_proc11_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                Block_proc11_U0_ap_start <= ap_const_logic_0;
            else
                Block_proc11_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;

    Block_proc11_U0_ap_continue <= ap_const_logic_1;
    Block_proc11_U0_start_full_n <= ap_const_logic_1;
    Block_proc11_U0_start_write <= ap_const_logic_0;
    ap_sync_continue <= ap_const_logic_0;
    din_V_read <= Block_proc11_U0_din_V_read;
    dout_V_din <= Block_proc11_U0_dout_V_din;
    dout_V_write <= Block_proc11_U0_dout_V_write;
    prDone_V_read <= Block_proc11_U0_prDone_V_read;
    pr_V_addr_din <= Block_proc11_U0_pr_V_addr_din;
    pr_V_addr_write <= Block_proc11_U0_pr_V_addr_write;
    pr_V_areaID_din <= Block_proc11_U0_pr_V_areaID_din;
    pr_V_areaID_write <= Block_proc11_U0_pr_V_areaID_write;
end behav;
